<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Thorlabs.TLPM_64.Interop</name>
    </assembly>
    <members>
        <member name="T:Thorlabs.TLPM_64.Interop.TLPM">
            <summary>
            
            </summary>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.Finalize">
            <summary>
            
            </summary>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.#ctor(System.IntPtr)">
            <summary>
            This function creates an IVI instrument driver session, typically using the C session instrument handle.
            </summary>
            <param name="Instrument_Handle">
            The instrument handle that is used to create an IVI instrument driver session.
            </param>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.#ctor(System.String,System.Boolean,System.Boolean)">
            <summary>
            This function initializes the instrument driver session and performs the following initialization actions:
            
            (1) Opens a session to the Default Resource Manager resource and a session to the specified device using the Resource Name.
            (2) Performs an identification query on the instrument.
            (3) Resets the instrument to a known state.
            (4) Sends initialization commands to the instrument.
            (5) Returns an instrument handle which is used to distinguish between different sessions of this instrument driver.
            
            Notes:
            (1) Each time this function is invoked a unique session is opened.  
            </summary>
            <param name="Resource_Name">
            This parameter specifies the device (resource) with which to establish a communication session. 
            
            The syntax for the Instrument Descriptor for USB interfaces:
            
            USB[board]::0x1313::product id::serial number[::interface number][::INSTR]
                            
            The syntax for the Instrument Descriptor for Bluetooth interfaces:
            
            ASRL&lt;port id&gt;[::INSTR]
            
            Optional segments are shown in square brackets ([]).
            
            Remote Access   visa://hostname[:port]/resource
            
            The default values for optional parameters are shown below.
            
            Optional Segment          Default Value
            ---------------------------------------
            board                     0
            USB interface number      0
            
            The USB product id codes for supported instruments are shown below.
            
            Product ID   Instrument Type
            -------------------------------------------------
            0x8070       PM100D with DFU interface enabled
            0x8071       PM100A with DFU interface enabled
            0x8072       PM100USB with DFU interface enabled
            0x8073       PM160 with DFU interface enabled
            0x8074       PM160T with DFU interface enabled
            0x8075       PM400 with DFU interface enabled
            0x8078       PM100D with DFU interface disabled
            0x8079       PM100A with DFU interface disabled
            0x807B       PM160 with DFU interface disabled
            0x807C       PM160T with DFU interface disabled
            0x807D       PM400 with DFU interface disabled
            0x80B0       PM200
            
            Example Resource Strings:
            --------------------------------------------------------------
            USB::0x1313::0x8070::M12345678::INSTR
                                  PM100D with a serial number of
                                  M12345678.
            
            USB::0x1313::0x80B0::M12345678::INSTR
                                  PM200 with a serial number of
                                  M12345678.
            
            ASRL3::INSTR
                                  PM160(T) on serial port COM3 over 
                                  bluetooth.
            
            visa://1.2.3.4/USB::0x1313::0x8071::M23456789::INSTR      
                                  Remote access to the PM100A with a serial
                                  number of M23456789 at the specified IP
                                  address.
            
            visa://hostname/USB::0x1313::0x8072::M34567890::INSTR
                                  Remote access to the PM100USB with a
                                  serial number of M23456789 on the
                                  specified host.
            
            Notes:
            (1) You may use VISA &lt;Find Resources&gt; with an appropriate seach pattern to get the Resource Name for your device. 
            For PM100x devices use: "USB?*::0x1313::0x807?::?*::INSTR" 
            For PM200 devices use:  "USB?*::0x1313::0x80B?::?*::INSTR"
            (2) You may use the driver functions in Resource Functions class for creating a list of available devices and getting the according Resource Name string. 
            
            </param>
            <param name="ID_Query">
            This parameter specifies whether an identification query is performed during the initialization process.
            
            VI_OFF (0): Skip query.
            VI_ON  (1): Do query (default).
            
            </param>
            <param name="Reset_Device">
            This parameter specifies whether the instrument is reset during the initialization process.
            
            VI_OFF (0) - no reset 
            VI_ON  (1) - instrument is reset (default)
            
            </param>
        </member>
        <member name="P:Thorlabs.TLPM_64.Interop.TLPM.Handle">
            <summary>
            Gets the instrument handle.
            </summary>
            <value>
            The value is the IntPtr that represents the handle to the instrument.
            </value>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.findRsrc(System.UInt32@)">
            <summary>
            This function finds all driver compatible devices attached to the PC and returns the number of found devices.
            
            Note:
            (1) The function additionally stores information like system name about the found resources internally. This information can be retrieved with further functions from the class, e.g. &lt;Get Resource Description&gt; and &lt;Get Resource Information&gt;.
            
            </summary>
            <param name="Resource_Count">
            The number of connected devices that are supported by this driver.
            
            </param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.getRsrcName(System.UInt32,System.Text.StringBuilder)">
            <summary>
            This function gets the resource name string needed to open a device with &lt;Initialize&gt;.
            
            Notes:
            (1) The data provided by this function was updated at the last call of &lt;Find Resources&gt;.
            </summary>
            <param name="Index">
            This parameter accepts the index of the device to get the resource descriptor from.
            
            Notes: 
            (1) The index is zero based. The maximum index to be used here is one less than the number of devices found by the last call of &lt;Find Resources&gt;.
            
            </param>
            <param name="Resource_Name">
            This parameter returns the resource descriptor. Use this descriptor to specify the device in &lt;Initialize&gt;.
            
            Notes:
            (1) The array must contain at least TLPM_BUFFER_SIZE (256) elements ViChar[256].
            </param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            
            Completition Codes
            ----------------------------------------------------------------
            VI_SUCCESS               Successful
            VI_ERROR_INV_OBJECT      Index specifies an invalid object
            
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.getRsrcInfo(System.UInt32,System.Text.StringBuilder,System.Text.StringBuilder,System.Text.StringBuilder,System.Boolean@)">
            <summary>
            This function gets information about a connected resource.
            
            Notes:
            (1) The data provided by this function was updated at the last call of &lt;Find Resources&gt;.
            </summary>
            <param name="Index">
            This parameter accepts the index of the device to get the resource descriptor from.
            
            Notes: 
            (1) The index is zero based. The maximum index to be used here is one less than the number of devices found by the last call of &lt;Find Resources&gt;.
            
            </param>
            <param name="Model_Name">
            This parameter returns the model name of the device.
            
            Notes:
            (1) The array must contain at least TLPM_BUFFER_SIZE (256) elements ViChar[256].
            (2) You may pass VI_NULL if you do not need this parameter.
            (3) Serial interfaces over Bluetooth will return the interface name instead of the device model name.
            </param>
            <param name="Serial_Number">
            This parameter returns the serial number of the device.
            
            Notes:
            (1) The array must contain at least TLPM_BUFFER_SIZE (256) elements ViChar[256].
            (2) You may pass VI_NULL if you do not need this parameter.
            (3) The serial number is not available for serial interfaces over Bluetooth.
            </param>
            <param name="Manufacturer">
            This parameter returns the manufacturer name of the device.
            
            Notes:
            (1) The array must contain at least TLPM_BUFFER_SIZE (256) elements ViChar[256].
            (2) You may pass VI_NULL if you do not need this parameter.
            (3) The manufacturer name is not available for serial interfaces over Bluetooth.
            </param>
            <param name="Device_Available">
            Returns the information if the device is available.
            Devices that are not available are used by other applications.
            
            Notes:
            (1) You may pass VI_NULL if you do not need this parameter.
            
            </param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            
            Completition Codes
            ----------------------------------------------------------------
            VI_SUCCESS               Successful
            VI_ERROR_INV_OBJECT      Index specifies an invalid object
            
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.writeRegister(System.Int16,System.Int16)">
            <summary>
            This function writes the content of any writable instrument register. Refer to your instrument's user's manual for more details on status structure registers.
            
            </summary>
            <param name="Register_ID">
            Specifies the register to be used for operation. This parameter can be any of the following constants:
            
              TLPM_REG_SRE         (1): Service Request Enable
              TLPM_REG_ESE         (3): Standard Event Enable
              TLPM_REG_OPER_ENAB   (6): Operation Event Enable Register
              TLPM_REG_OPER_PTR    (7): Operation Positive Transition
              TLPM_REG_OPER_NTR    (8): Operation Negative Transition
              TLPM_REG_QUES_ENAB  (11): Questionable Event Enable Reg.
              TLPM_REG_QUES_PTR   (12): Questionable Positive Transition
              TLPM_REG_QUES_NTR   (13): Questionable Negative Transition
              TLPM_REG_MEAS_ENAB  (16): Measurement Event Enable Register
              TLPM_REG_MEAS_PTR   (17): Measurement Positive Transition
              TLPM_REG_MEAS_NTR   (18): Measurement Negative Transition
              TLPM_REG_AUX_ENAB   (21): Auxiliary Event Enable Register
              TLPM_REG_AUX_PTR    (22): Auxiliary Positive Transition
              TLPM_REG_AUX_NTR    (23): Auxiliary Negative Transition 
            
            </param>
            <param name="Value">
            This parameter specifies the new value of the selected register.
            
            These register bits are defined:
            
            STATUS BYTE bits (see IEEE488.2-1992 ?11.2)
            TLPM_STATBIT_STB_AUX        (0x01): Auxiliary summary
            TLPM_STATBIT_STB_MEAS       (0x02): Device Measurement Summary
            TLPM_STATBIT_STB_EAV        (0x04): Error available
            TLPM_STATBIT_STB_QUES       (0x08): Questionable Status Summary
            TLPM_STATBIT_STB_MAV        (0x10): Message available
            TLPM_STATBIT_STB_ESB        (0x20): Event Status Bit
            TLPM_STATBIT_STB_MSS        (0x40): Master summary status
            TLPM_STATBIT_STB_OPER       (0x80): Operation Status Summary
            
            STANDARD EVENT STATUS REGISTER bits (see IEEE488.2-1992 ?11.5.1)
            TLPM_STATBIT_ESR_OPC        (0x01): Operation complete
            TLPM_STATBIT_ESR_RQC        (0x02): Request control
            TLPM_STATBIT_ESR_QYE        (0x04): Query error
            TLPM_STATBIT_ESR_DDE        (0x08): Device-Specific error
            TLPM_STATBIT_ESR_EXE        (0x10): Execution error
            TLPM_STATBIT_ESR_CME        (0x20): Command error
            TLPM_STATBIT_ESR_URQ        (0x40): User request
            TLPM_STATBIT_ESR_PON        (0x80): Power on
            
            QUESTIONABLE STATUS REGISTER bits (see SCPI 99.0 ?9)
            TLPM_STATBIT_QUES_VOLT      (0x0001): Questionable voltage measurement
            TLPM_STATBIT_QUES_CURR      (0x0002): Questionable current measurement
            TLPM_STATBIT_QUES_TIME      (0x0004): Questionable time measurement
            TLPM_STATBIT_QUES_POW       (0x0008): Questionable power measurement
            TLPM_STATBIT_QUES_TEMP      (0x0010): Questionable temperature measurement
            TLPM_STATBIT_QUES_FREQ      (0x0020): Questionable frequency measurement
            TLPM_STATBIT_QUES_PHAS      (0x0040): Questionable phase measurement
            TLPM_STATBIT_QUES_MOD       (0x0080): Questionable modulation measurement
            TLPM_STATBIT_QUES_CAL       (0x0100): Questionable calibration
            TLPM_STATBIT_QUES_ENER      (0x0200): Questionable energy measurement
            TLPM_STATBIT_QUES_10        (0x0400): Reserved
            TLPM_STATBIT_QUES_11        (0x0800): Reserved
            TLPM_STATBIT_QUES_12        (0x1000): Reserved
            TLPM_STATBIT_QUES_INST      (0x2000): Instrument summary
            TLPM_STATBIT_QUES_WARN      (0x4000): Command warning
            TLPM_STATBIT_QUES_15        (0x8000): Reserved
            
            OPERATION STATUS REGISTER bits (see SCPI 99.0 ?9)
            TLPM_STATBIT_OPER_CAL       (0x0001): The instrument is currently performing a calibration.
            TLPM_STATBIT_OPER_SETT      (0x0002): The instrument is waiting for signals to stabilize for measurements.
            TLPM_STATBIT_OPER_RANG      (0x0004): The instrument is currently changing its range.
            TLPM_STATBIT_OPER_SWE       (0x0008): A sweep is in progress.
            TLPM_STATBIT_OPER_MEAS      (0x0010): The instrument is actively measuring.
            TLPM_STATBIT_OPER_TRIG      (0x0020): The instrument is in a ?wait for trigger? state of the trigger model.
            TLPM_STATBIT_OPER_ARM       (0x0040): The instrument is in a ?wait for arm? state of the trigger model.
            TLPM_STATBIT_OPER_CORR      (0x0080): The instrument is currently performing a correction (Auto-PID tune).
            TLPM_STATBIT_OPER_SENS      (0x0100): Optical powermeter sensor connected and operable.
            TLPM_STATBIT_OPER_DATA      (0x0200): Measurement data ready for fetch.
            TLPM_STATBIT_OPER_THAC      (0x0400): Thermopile accelerator active.
            TLPM_STATBIT_OPER_11        (0x0800): Reserved
            TLPM_STATBIT_OPER_12        (0x1000): Reserved
            TLPM_STATBIT_OPER_INST      (0x2000): One of n multiple logical instruments is reporting OPERational status.
            TLPM_STATBIT_OPER_PROG      (0x4000): A user-defined programming is currently in the run state.
            TLPM_STATBIT_OPER_15        (0x8000): Reserved
            
            Thorlabs defined MEASRUEMENT STATUS REGISTER bits
            TLPM_STATBIT_MEAS_0         (0x0001): Reserved
            TLPM_STATBIT_MEAS_1         (0x0002): Reserved
            TLPM_STATBIT_MEAS_2         (0x0004): Reserved
            TLPM_STATBIT_MEAS_3         (0x0008): Reserved
            TLPM_STATBIT_MEAS_4         (0x0010): Reserved
            TLPM_STATBIT_MEAS_5         (0x0020): Reserved
            TLPM_STATBIT_MEAS_6         (0x0040): Reserved
            TLPM_STATBIT_MEAS_7         (0x0080): Reserved
            TLPM_STATBIT_MEAS_8         (0x0100): Reserved
            TLPM_STATBIT_MEAS_9         (0x0200): Reserved
            TLPM_STATBIT_MEAS_10        (0x0400): Reserved
            TLPM_STATBIT_MEAS_11        (0x0800): Reserved
            TLPM_STATBIT_MEAS_12        (0x1000): Reserved
            TLPM_STATBIT_MEAS_13        (0x2000): Reserved
            TLPM_STATBIT_MEAS_14        (0x4000): Reserved
            TLPM_STATBIT_MEAS_15        (0x8000): Reserved
            
            Thorlabs defined Auxiliary STATUS REGISTER bits
            TLPM_STATBIT_AUX_NTC        (0x0001): Auxiliary NTC temperature sensor connected.
            TLPM_STATBIT_AUX_EMM        (0x0002): External measurement module connected.
            TLPM_STATBIT_AUX_2          (0x0004): Reserved
            TLPM_STATBIT_AUX_3          (0x0008): Reserved
            TLPM_STATBIT_AUX_EXPS       (0x0010): External power supply connected
            TLPM_STATBIT_AUX_BATC       (0x0020): Battery charging
            TLPM_STATBIT_AUX_BATL       (0x0040): Battery low
            TLPM_STATBIT_AUX_IPS        (0x0080): Apple(tm) authentification supported.
            TLPM_STATBIT_AUX_IPF        (0x0100): Apple(tm) authentification failed.
            TLPM_STATBIT_AUX_9          (0x0200): Reserved
            TLPM_STATBIT_AUX_10         (0x0400): Reserved
            TLPM_STATBIT_AUX_11         (0x0800): Reserved
            TLPM_STATBIT_AUX_12         (0x1000): Reserved
            TLPM_STATBIT_AUX_13         (0x2000): Reserved
            TLPM_STATBIT_AUX_14         (0x4000): Reserved
            TLPM_STATBIT_AUX_15         (0x8000): Reserved
            
            </param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.readRegister(System.Int16,System.Int16@)">
            <summary>
            This function reads the content of any readable instrument register. Refer to your instrument's user's manual for more details on status structure registers.
            
            </summary>
            <param name="Register_ID">
            Specifies the register to be used for operation. This parameter can be any of the following constants:
            
              TLPM_REG_STB         (0): Status Byte Register
              TLPM_REG_SRE         (1): Service Request Enable
              TLPM_REG_ESB         (2): Standard Event Status Register
              TLPM_REG_ESE         (3): Standard Event Enable
              TLPM_REG_OPER_COND   (4): Operation Condition Register
              TLPM_REG_OPER_EVENT  (5): Operation Event Register
              TLPM_REG_OPER_ENAB   (6): Operation Event Enable Register
              TLPM_REG_OPER_PTR    (7): Operation Positive Transition
              TLPM_REG_OPER_NTR    (8): Operation Negative Transition
              TLPM_REG_QUES_COND   (9): Questionable Condition Register
              TLPM_REG_QUES_EVENT (10): Questionable Event Register
              TLPM_REG_QUES_ENAB  (11): Questionable Event Enable Reg.
              TLPM_REG_QUES_PTR   (12): Questionable Positive Transition
              TLPM_REG_QUES_NTR   (13): Questionable Negative Transition
              TLPM_REG_MEAS_COND  (14): Measurement Condition Register
              TLPM_REG_MEAS_EVENT (15): Measurement Event Register
              TLPM_REG_MEAS_ENAB  (16): Measurement Event Enable Register
              TLPM_REG_MEAS_PTR   (17): Measurement Positive Transition
              TLPM_REG_MEAS_NTR   (18): Measurement Negative Transition
              TLPM_REG_AUX_COND   (19): Auxiliary Condition Register
              TLPM_REG_AUX_EVENT  (20): Auxiliary Event Register
              TLPM_REG_AUX_ENAB   (21): Auxiliary Event Enable Register
              TLPM_REG_AUX_PTR    (22): Auxiliary Positive Transition
              TLPM_REG_AUX_NTR    (23): Auxiliary Negative Transition 
            
            </param>
            <param name="Value">
            This parameter returns the value of the selected register.
            
            These register bits are defined:
            
            STATUS BYTE bits (see IEEE488.2-1992 ?11.2)
            TLPM_STATBIT_STB_AUX        (0x01): Auxiliary summary
            TLPM_STATBIT_STB_MEAS       (0x02): Device Measurement Summary
            TLPM_STATBIT_STB_EAV        (0x04): Error available
            TLPM_STATBIT_STB_QUES       (0x08): Questionable Status Summary
            TLPM_STATBIT_STB_MAV        (0x10): Message available
            TLPM_STATBIT_STB_ESB        (0x20): Event Status Bit
            TLPM_STATBIT_STB_MSS        (0x40): Master summary status
            TLPM_STATBIT_STB_OPER       (0x80): Operation Status Summary
            
            STANDARD EVENT STATUS REGISTER bits (see IEEE488.2-1992 ?11.5.1)
            TLPM_STATBIT_ESR_OPC        (0x01): Operation complete
            TLPM_STATBIT_ESR_RQC        (0x02): Request control
            TLPM_STATBIT_ESR_QYE        (0x04): Query error
            TLPM_STATBIT_ESR_DDE        (0x08): Device-Specific error
            TLPM_STATBIT_ESR_EXE        (0x10): Execution error
            TLPM_STATBIT_ESR_CME        (0x20): Command error
            TLPM_STATBIT_ESR_URQ        (0x40): User request
            TLPM_STATBIT_ESR_PON        (0x80): Power on
            
            QUESTIONABLE STATUS REGISTER bits (see SCPI 99.0 ?9)
            TLPM_STATBIT_QUES_VOLT      (0x0001): Questionable voltage measurement
            TLPM_STATBIT_QUES_CURR      (0x0002): Questionable current measurement
            TLPM_STATBIT_QUES_TIME      (0x0004): Questionable time measurement
            TLPM_STATBIT_QUES_POW       (0x0008): Questionable power measurement
            TLPM_STATBIT_QUES_TEMP      (0x0010): Questionable temperature measurement
            TLPM_STATBIT_QUES_FREQ      (0x0020): Questionable frequency measurement
            TLPM_STATBIT_QUES_PHAS      (0x0040): Questionable phase measurement
            TLPM_STATBIT_QUES_MOD       (0x0080): Questionable modulation measurement
            TLPM_STATBIT_QUES_CAL       (0x0100): Questionable calibration
            TLPM_STATBIT_QUES_ENER      (0x0200): Questionable energy measurement
            TLPM_STATBIT_QUES_10        (0x0400): Reserved
            TLPM_STATBIT_QUES_11        (0x0800): Reserved
            TLPM_STATBIT_QUES_12        (0x1000): Reserved
            TLPM_STATBIT_QUES_INST      (0x2000): Instrument summary
            TLPM_STATBIT_QUES_WARN      (0x4000): Command warning
            TLPM_STATBIT_QUES_15        (0x8000): Reserved
            
            OPERATION STATUS REGISTER bits (see SCPI 99.0 ?9)
            TLPM_STATBIT_OPER_CAL       (0x0001): The instrument is currently performing a calibration.
            TLPM_STATBIT_OPER_SETT      (0x0002): The instrument is waiting for signals to stabilize for measurements.
            TLPM_STATBIT_OPER_RANG      (0x0004): The instrument is currently changing its range.
            TLPM_STATBIT_OPER_SWE       (0x0008): A sweep is in progress.
            TLPM_STATBIT_OPER_MEAS      (0x0010): The instrument is actively measuring.
            TLPM_STATBIT_OPER_TRIG      (0x0020): The instrument is in a ?wait for trigger? state of the trigger model.
            TLPM_STATBIT_OPER_ARM       (0x0040): The instrument is in a ?wait for arm? state of the trigger model.
            TLPM_STATBIT_OPER_CORR      (0x0080): The instrument is currently performing a correction (Auto-PID tune).
            TLPM_STATBIT_OPER_SENS      (0x0100): Optical powermeter sensor connected and operable.
            TLPM_STATBIT_OPER_DATA      (0x0200): Measurement data ready for fetch.
            TLPM_STATBIT_OPER_THAC      (0x0400): Thermopile accelerator active.
            TLPM_STATBIT_OPER_11        (0x0800): Reserved
            TLPM_STATBIT_OPER_12        (0x1000): Reserved
            TLPM_STATBIT_OPER_INST      (0x2000): One of n multiple logical instruments is reporting OPERational status.
            TLPM_STATBIT_OPER_PROG      (0x4000): A user-defined programming is currently in the run state.
            TLPM_STATBIT_OPER_15        (0x8000): Reserved
            
            Thorlabs defined MEASRUEMENT STATUS REGISTER bits
            TLPM_STATBIT_MEAS_0         (0x0001): Reserved
            TLPM_STATBIT_MEAS_1         (0x0002): Reserved
            TLPM_STATBIT_MEAS_2         (0x0004): Reserved
            TLPM_STATBIT_MEAS_3         (0x0008): Reserved
            TLPM_STATBIT_MEAS_4         (0x0010): Reserved
            TLPM_STATBIT_MEAS_5         (0x0020): Reserved
            TLPM_STATBIT_MEAS_6         (0x0040): Reserved
            TLPM_STATBIT_MEAS_7         (0x0080): Reserved
            TLPM_STATBIT_MEAS_8         (0x0100): Reserved
            TLPM_STATBIT_MEAS_9         (0x0200): Reserved
            TLPM_STATBIT_MEAS_10        (0x0400): Reserved
            TLPM_STATBIT_MEAS_11        (0x0800): Reserved
            TLPM_STATBIT_MEAS_12        (0x1000): Reserved
            TLPM_STATBIT_MEAS_13        (0x2000): Reserved
            TLPM_STATBIT_MEAS_14        (0x4000): Reserved
            TLPM_STATBIT_MEAS_15        (0x8000): Reserved
            
            Thorlabs defined Auxiliary STATUS REGISTER bits
            TLPM_STATBIT_AUX_NTC        (0x0001): Auxiliary NTC temperature sensor connected.
            TLPM_STATBIT_AUX_EMM        (0x0002): External measurement module connected.
            TLPM_STATBIT_AUX_2          (0x0004): Reserved
            TLPM_STATBIT_AUX_3          (0x0008): Reserved
            TLPM_STATBIT_AUX_EXPS       (0x0010): External power supply connected
            TLPM_STATBIT_AUX_BATC       (0x0020): Battery charging
            TLPM_STATBIT_AUX_BATL       (0x0040): Battery low
            TLPM_STATBIT_AUX_IPS        (0x0080): Apple(tm) authentification supported.
            TLPM_STATBIT_AUX_IPF        (0x0100): Apple(tm) authentification failed.
            TLPM_STATBIT_AUX_9          (0x0200): Reserved
            TLPM_STATBIT_AUX_10         (0x0400): Reserved
            TLPM_STATBIT_AUX_11         (0x0800): Reserved
            TLPM_STATBIT_AUX_12         (0x1000): Reserved
            TLPM_STATBIT_AUX_13         (0x2000): Reserved
            TLPM_STATBIT_AUX_14         (0x4000): Reserved
            TLPM_STATBIT_AUX_15         (0x8000): Reserved
            
            </param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.presetRegister">
            <summary>
            This function presets all status registers to default.
            
            </summary>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.setTime(System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16)">
            <summary>
            This function sets the system date and time of the powermeter.
            
            Notes:
            (1) Date and time are displayed on instruments screen and are used as timestamp for data saved to memory card.
            (2) The function is only available on PM100D, PM200, PM400.
            </summary>
            <param name="Year">
            This parameter specifies the actual year in the format yyyy e.g. 2009.
            </param>
            <param name="Month">
            This parameter specifies the actual month in the format mm e.g. 01.
            </param>
            <param name="Day">
            This parameter specifies the actual day in the format dd e.g. 15.
            
            </param>
            <param name="Hour">
            This parameter specifies the actual hour in the format hh e.g. 14.
            
            </param>
            <param name="Minute">
            This parameter specifies the actual minute in the format mm e.g. 43.
            
            </param>
            <param name="Second">
            This parameter specifies the actual second in the format ss e.g. 50.
            
            </param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.getTime(System.Int16@,System.Int16@,System.Int16@,System.Int16@,System.Int16@,System.Int16@)">
            <summary>
            This function returns the system date and time of the powermeter.
            
            Notes:
            (1) Date and time are displayed on instruments screen and are used as timestamp for data saved to memory card.
            (2) The function is only available on PM100D, PM200, PM400.
            </summary>
            <param name="Year">
            This parameter specifies the actual year in the format yyyy.
            </param>
            <param name="Month">
            This parameter specifies the actual month in the format mm.
            </param>
            <param name="Day">
            This parameter specifies the actual day in the format dd.
            </param>
            <param name="Hour">
            This parameter specifies the actual hour in the format hh.
            </param>
            <param name="Minute">
            This parameter specifies the actual minute in the format mm.
            </param>
            <param name="Second">
            This parameter specifies the actual second in the format ss.
            </param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.setLineFrequency(System.Int16)">
            <summary>
            This function selects the line frequency.
            
            Notes:
            (1) The function is only available on PM100A, PM100D, PM100USB, PM200.
            
            </summary>
            <param name="Line_Frequency">
            This parameter specifies the line frequency.
            
            Accepted values:
              TLPM_LINE_FREQ_50 (50): 50Hz
              TLPM_LINE_FREQ_60 (60): 60Hz
            
            
            </param>
            <returns>
            This value shows the status code returned by the function call.
            
            For Status Codes see function &lt;Error Message&gt;.
            
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.getLineFrequency(System.Int16@)">
            <summary>
            This function returns the selected line frequency.
            
            Notes:
            (1) The function is only available on PM100A, PM100D, PM100USB, PM200.
            
            </summary>
            <param name="Line_Frequency">
            This parameter returns the selected line frequency in Hz.
            </param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.getBatteryVoltage(System.Double@)">
            <summary>
            This function is used to obtain the battery voltage readings from the instrument.
            
            Remark:
            (1) This function is only supported with the PM160 and PM160T.
            (2) This function obtains the latest battery voltage measurement result.
            (3) With the USB cable connected this function will obtain the loading voltage. Only with USB cable disconnected (Bluetooth connection) the actual battery voltage can be read. 
            </summary>
            <param name="Voltage">
            This parameter returns the battery voltage in volts [V].
            </param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.setDispBrightness(System.Double)">
            <summary>
            This function sets the display brightness.
            </summary>
            <param name="Brightness">
            This parameter specifies the display brightness.
            
            Range   : 0.0 .. 1.0
            Default : 1.0
            
            </param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.getDispBrightness(System.Double@)">
            <summary>
            This function returns the display brightness.
            
            </summary>
            <param name="Brightness">
            This parameter returns the display brightness. Value range is 0.0 to 1.0.
            </param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.setDispContrast(System.Double)">
            <summary>
            This function sets the display contrast of a PM100D.
            
            Note: The function is available on PM100D only.
            </summary>
            <param name="Contrast">
            This parameter specifies the display contrast.
            
            Range   : 0.0 .. 1.0
            Default : 0.5
            
            </param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.getDispContrast(System.Double@)">
            <summary>
            This function returns the display contrast of a PM100D.
            
            Note: This function is available on PM100D only
            </summary>
            <param name="Contrast">
            This parameter returns the display contrast (0..1).
            </param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.setInputFilterState(System.Boolean)">
            <summary>
            This function sets the instrument's photodiode input filter state.
            
            Notes:
            (1) The function is only available on PM100D, PM100A, PM100USB, PM200, PM400.
            
            </summary>
            <param name="Photodiode_Input_Filter_State">
            This parameter specifies the input filter mode.
            
            Acceptable values:
              TLPM_INPUT_FILTER_STATE_OFF (0) input filter off
              TLPM_INPUT_FILTER_STATE_ON  (1) input filter on
            </param>
            <returns>
            This value shows the status code returned by the function call.
            
            For Status Codes see function &lt;Error Message&gt;.
            
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.getInputFilterState(System.Boolean@)">
            <summary>
            This function returns the instrument's photodiode input filter state.
            
            Notes:
            (1) The function is only available on PM100D, PM100A, PM100USB, PM200, PM400.
            
            </summary>
            <param name="Photodiode_Input_Filter_State">
            This parameter returns the input filter state.
            
            Return values:
              TLPM_INPUT_FILTER_STATE_OFF (0) input filter off
              TLPM_INPUT_FILTER_STATE_ON  (1) input filter on
            
            </param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.setAccelState(System.Boolean)">
            <summary>
            This function sets the thermopile acceleration state.
            
            Notes:
            (1) The function is only available on PM100D, PM100A, PM100USB, PM160T, PM200.
            
            </summary>
            <param name="Thermopile_Accelerator_State">
            This parameter specifies the thermopile acceleration mode.
            
            Acceptable values:
              TLPM_ACCELERATION_STATE_OFF (0): thermopile acceleration off
              TLPM_ACCELERATION_STATE_ON  (1): thermopile acceleration on
            
            </param>
            <returns>
            This value shows the status code returned by the function call.
            
            For Status Codes see function &lt;Error Message&gt;.
            
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.getAccelState(System.Boolean@)">
            <summary>
            This function returns the thermopile acceleration state.
            
            Notes:
            (1) The function is only available on PM100D, PM100A, PM100USB, PM160T, PM200, PM400.
            
            </summary>
            <param name="Thermopile_Accelerator_State">
            This parameter returns the thermopile acceleration mode.
            
            Return values:
              TLPM_ACCELERATION_STATE_OFF (0): thermopile acceleration off
              TLPM_ACCELERATION_STATE_ON  (1): thermopile acceleration on
            
            </param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.setAccelMode(System.Boolean)">
            <summary>
            This function sets the thermopile acceleration auto mode.
            
            While thermopile acceleration improves displaying changing measurement values it unfortunately adds extra noise which can become noticeable on constant values measurements. With acceleration mode set to AUTO the instrument enables the acceleration circuitry after big measurement value changes for five times of "Tau". See also functions &lt;Set Thermopile Accelerator Tau&gt; and &lt;Set Thermopile Accelerator State&gt;.
            
            With calling &lt;Set Thermopile Accelerator State&gt; the accelerator mode will always be reset to MANUAL.
            
            Notes:
            (1) The function is only available on PM100D, PM100A, PM100USB, PM160T, PM200, PM400.
            
            </summary>
            <param name="Thermopile_Accelerator_Mode">
            This parameter specifies the thermopile acceleration mode.
            
            Acceptable values:
              TLPM_ACCELERATION_MANUAL (0): auto acceleration off
              TLPM_ACCELERATION_AUTO   (1): auto acceleration on
            
            </param>
            <returns>
            This value shows the status code returned by the function call.
            
            For Status Codes see function &lt;Error Message&gt;.
            
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.getAccelMode(System.Boolean@)">
            <summary>
            This function returns the thermopile acceleration mode.
            
            Notes:
            (1) The function is only available on PM100D, PM100A, PM100USB, PM160T, PM200, PM400.
            
            </summary>
            <param name="Thermopile_Accelerator_Mode">
            This parameter returns the thermopile acceleration mode.
            
            Return values:
              TLPM_ACCELERATION_MANUAL (0): auto acceleration off
              TLPM_ACCELERATION_AUTO   (1): auto acceleration on
            
            </param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.setAccelTau(System.Double)">
            <summary>
            This function sets the thermopile acceleration time constant in seconds [s].
            
            Notes:
            (1) The function is only available on PM100D, PM100A, PM100USB, PM200, PM400.
            
            </summary>
            <param name="Thermopile_Accelerator_Tau">
            This parameter specifies the thermopile acceleration time constant in seconds [s].
            
            </param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.getAccelTau(System.Int16,System.Double@)">
            <summary>
            This function returns the thermopile acceleration time constant in seconds [s].
            
            Notes:
            (1) The function is only available on PM100D, PM100A, PM100USB, PM200, PM400.
            
            </summary>
            <param name="Attribute">
            This parameter specifies the value to be queried.
            
            Acceptable values:
              TLPM_ATTR_SET_VAL  (0): Set value
              TLPM_ATTR_MIN_VAL  (1): Minimum value
              TLPM_ATTR_MAX_VAL  (2): Maximum value
              TLPM_ATTR_DFLT_VAL (3): Default value
            
            </param>
            <param name="Thermopile_Accelerator_Tau">
            This parameter returns the thermopile acceleration time constant in seconds [s].
            
            </param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.setInputAdapterType(System.Int16)">
            <summary>
            This function sets the sensor type to assume for custom sensors without calibration data memory connected to the instrument.
            
            Notes:
            (1) The function is only available on PM100D, PM100A, PM100USB, PM200, PM400.
            
            </summary>
            <param name="Custom_Sensor_Type">
            This parameter specifies the custom sensor type.
            
            Acceptable values:
             SENSOR_TYPE_PD_SINGLE (1): Photodiode sensor
             SENSOR_TYPE_THERMO    (2): Thermopile sensor
             SENSOR_TYPE_PYRO      (3): Pyroelectric sensor
            
            Value SENSOR_TYPE_PYRO is only available for energy meter instruments.
            </param>
            <returns>
            This value shows the status code returned by the function call.
            
            For Status Codes see function &lt;Error Message&gt;.
            
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.getInputAdapterType(System.Int16@)">
            <summary>
            This function returns the assumed sensor type for custom sensors without calibration data memory connected to the instrument.
            
            Notes:
            (1) The function is only available on PM100D, PM100A, PM100USB, PM200, PM400.
            
            </summary>
            <param name="Custom_Sensor_Type">
            This parameter returns the custom sensor type.
            
            Remark:
            The meanings of the obtained sensor type are:
            
            Sensor Types:
             SENSOR_TYPE_PD_SINGLE (1): Photodiode sensor
             SENSOR_TYPE_THERMO    (2): Thermopile sensor
             SENSOR_TYPE_PYRO      (3): Pyroelectric sensor
             SENSOR_TYPE_4Q        (4): 4 Quadrant sensor
            </param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.setAvgTime(System.Double)">
            <summary>
            This function sets the average time for measurement value generation.
            </summary>
            <param name="Average_Time">
            This parameter specifies the average time in seconds.
            
            The value will be rounded to the closest multiple of the device's internal sampling rate.
            
            Remark: 
            To get an measurement value from the device the timeout in your application has to be longer than the average time.
            
            
            </param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.getAvgTime(System.Int16,System.Double@)">
            <summary>
            This function returns the average time for measurement value generation.
            
            </summary>
            <param name="Attribute">
            This parameter specifies the value to be queried.
            
            Acceptable values:
              TLPM_ATTR_SET_VAL  (0): Set value
              TLPM_ATTR_MIN_VAL  (1): Minimum value
              TLPM_ATTR_MAX_VAL  (2): Maximum value
              TLPM_ATTR_DFLT_VAL (3): Default value
            
            </param>
            <param name="Average_Time">
            This parameter returns the specified average time in seconds.
            
            </param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.setAvgCnt(System.Int16)">
            <summary>
            This function sets the average count for measurement value generation.
            
            Notes:
            (1) The function is only available on PM100A, PM100D, PM100USB, PM200, PM400.
            (2) The function is deprecated and kept for legacy reasons. Its recommended to use TLPM_setAvgTime() instead.
            
            </summary>
            <param name="Average_Count">
            This parameter specifies the average count.
            The default value is 1.
            
            Remark: 
            Depending on the powermeter model internal there are taken up to 3000 measurements per second.
            In this example   Average Time = Average Count / 3000 [s].
            To get an measurement value from the device the timeout in your application has to be longer than the calculated average time.
            
            
            </param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.getAvgCnt(System.Int16@)">
            <summary>
            This function returns the average count for measurement value generation.
            
            Notes:
            (1) The function is only available on PM100A, PM100D, PM100USB, PM200, PM400.
            (2) The function is deprecated and kept for legacy reasons. Its recommended to use TLPM_getAvgTime() instead.
            
            </summary>
            <param name="Average_Count">
            This parameter returns the actual Average Count.
            
            Remark: 
            Depending on the powermeter model internal there are taken up to 3000 measurements per second.
            In this example   Average Time = Average Count / 3000 [s].
            To get an measurement value from the device the timeout in your application has to be longer than the calculated average time.
            </param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.setAttenuation(System.Double)">
            <summary>
            This function sets the input attenuation.
            
            Notes:
            (1) The function is only available on PM100A, PM100D, PM100USB, PM200, PM400.
            
            </summary>
            <param name="Attenuation">
            This parameter specifies the input attenuation in dezibel [dB].
            
            </param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.getAttenuation(System.Int16,System.Double@)">
            <summary>
            This function returns the input attenuation.
            
            Notes:
            (1) The function is only available on PM100A, PM100D, PM100USB, PM200, PM400.
            
            </summary>
            <param name="Attribute">
            This parameter specifies the value to be queried.
            
            Acceptable values:
              TLPM_ATTR_SET_VAL  (0): Set value
              TLPM_ATTR_MIN_VAL  (1): Minimum value
              TLPM_ATTR_MAX_VAL  (2): Maximum value
              TLPM_ATTR_DFLT_VAL (3): Default value
            
            </param>
            <param name="Attenuation">
            This parameter returns the specified input attenuation in dezibel [dB].
            
            </param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.startDarkAdjust">
            <summary>
            This function starts the dark current/zero offset adjustment procedure.
            
            Remark: 
            (1) You have to darken the input before starting dark/zero adjustment.
            (2) You can get the state of dark/zero adjustment with &lt;Get Dark Adjustment State&gt;
            (3) You can stop dark/zero adjustment with &lt;Cancel Dark Adjustment&gt;
            (4) You get the dark/zero value with &lt;Get Dark Offset&gt;
            (5) Energy sensors do not support this function
            </summary>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.cancelDarkAdjust">
            <summary>
            This function cancels a running dark current/zero offset adjustment procedure.
            
            </summary>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.getDarkAdjustState(System.Int16@)">
            <summary>
            This function returns the state of a dark current/zero offset adjustment procedure previously initiated by &lt;Start Dark Adjust&gt;.
            
            </summary>
            <param name="State">
            This parameter returns the dark adjustment state.
            
            Possible return values are:
            TLPM_STAT_DARK_ADJUST_FINISHED (0) : no dark adjustment running
            TLPM_STAT_DARK_ADJUST_RUNNING  (1) : dark adjustment is running
            </param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.getDarkOffset(System.Double@)">
            <summary>
            This function returns the dark/zero offset.
            
            The function is not supported with energy sensors.
            </summary>
            <param name="Dark_Offset">
            This parameter returns the dark/zero offset.
            
            The unit of the returned offset value depends on the sensor type. Photodiodes return the dark offset in ampere [A]. Thermal sensors return the dark offset in volt [V].
            </param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.setBeamDia(System.Double)">
            <summary>
            This function sets the users beam diameter in millimeter [mm].
            
            Notes:
            (1) The function is only available on PM100A, PM100D, PM100USB, PM200, PM400.
            (2) Beam diameter set value is used for calculating power and energy density.
            
            </summary>
            <param name="Beam_Diameter">
            This parameter specifies the users beam diameter in millimeter [mm].
            
            Remark:
            Beam diameter set value is used for calculating power and energy density.
            
            </param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.getBeamDia(System.Int16,System.Double@)">
            <summary>
            This function returns the users beam diameter in millimeter [mm].
            
            Notes:
            (1) The function is only available on PM100A, PM100D, PM100USB, PM200, PM101, PM102, PM400.
            (2) Beam diameter set value is used for calculating power and energy density.
            
            </summary>
            <param name="Attribute">
            This parameter specifies the value to be queried.
            
            Acceptable values:
              TLPM_ATTR_SET_VAL  (0): Set value
              TLPM_ATTR_MIN_VAL  (1): Minimum value
              TLPM_ATTR_MAX_VAL  (2): Maximum value
            
            </param>
            <param name="Beam_Diameter">
            This parameter returns the specified beam diameter in millimeter [mm].
            
            Remark:
            Beam diameter set value is used for calculating power and energy density.
            </param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.setWavelength(System.Double)">
            <summary>
            This function sets the users wavelength in nanometer [nm].
            
            Remark:
            Wavelength set value is used for calculating power.
            
            </summary>
            <param name="Wavelength">
            This parameter specifies the users wavelength in nanometer [nm].
            
            Remark:
            Wavelength set value is used for calculating power.
            
            </param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.getWavelength(System.Int16,System.Double@)">
            <summary>
            This function returns the users wavelength in nanometer [nm].
            
            Remark:
            Wavelength set value is used for calculating power.
            
            </summary>
            <param name="Attribute">
            This parameter specifies the value to be queried.
            
            Acceptable values:
              TLPM_ATTR_SET_VAL  (0): Set value
              TLPM_ATTR_MIN_VAL  (1): Minimum value
              TLPM_ATTR_MAX_VAL  (2): Maximum value
            
            </param>
            <param name="Wavelength">
            This parameter returns the specified wavelength in nanometer [nm].
            
            Remark:
            Wavelength set value is used for calculating power.
            </param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.setPhotodiodeResponsivity(System.Double)">
            <summary>
            This function sets the photodiode responsivity in ampere per watt [A/W].
            
            Notes:
            (1) The function is only available on PM100A, PM100D, PM100USB, PM200, PM400.
            
            </summary>
            <param name="Response">
            This parameter specifies the photodiode responsivity in ampere per watt [A/W].
            
            </param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.getPhotodiodeResponsivity(System.Int16,System.Double@)">
            <summary>
            This function returns the photodiode responsivity in ampere per watt [A/W].
            
            Notes:
            (1) The function is only available on PM100A, PM100D, PM100USB, PM200, PM400.
            
            </summary>
            <param name="Attribute">
            This parameter specifies the value to be queried.
            
            Acceptable values:
              TLPM_ATTR_SET_VAL  (0): Set value
              TLPM_ATTR_MIN_VAL  (1): Minimum value
              TLPM_ATTR_MAX_VAL  (2): Maximum value
              TLPM_ATTR_DFLT_VAL (3): Default value
            
            </param>
            <param name="Responsivity">
            This parameter returns the specified photodiode responsivity in ampere per watt [A/W].
            
            </param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.setThermopileResponsivity(System.Double)">
            <summary>
            This function sets the thermopile responsivity in volt per watt [V/W]
            
            Notes:
            (1) The function is only available on PM100A, PM100D, PM100USB, PM200, PM400.
            
            </summary>
            <param name="Response">
            This parameter specifies the thermopile responsivity in volt per watt [V/W]
            
            </param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.getThermopileResponsivity(System.Int16,System.Double@)">
            <summary>
            This function returns the thermopile responsivity in volt per watt [V/W]
            
            Notes:
            (1) The function is only available on PM100A, PM100D, PM100USB, PM160T, PM200, PM400.
            
            </summary>
            <param name="Attribute">
            This parameter specifies the value to be queried.
            
            Acceptable values:
              TLPM_ATTR_SET_VAL  (0): Set value
              TLPM_ATTR_MIN_VAL  (1): Minimum value
              TLPM_ATTR_MAX_VAL  (2): Maximum value
              TLPM_ATTR_DFLT_VAL (3): Default value
            
            </param>
            <param name="Responsivity">
            This parameter returns the specified thermopile responsivity in volt per watt [V/W]
            
            </param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.setPyrosensorResponsivity(System.Double)">
            <summary>
            This function sets the pyrosensor responsivity in volt per joule [V/J]
            
            Notes:
            (1) The function is only available on PM100A, PM100D, PM100USB, PM200, PM400.
            
            </summary>
            <param name="Response">
            This parameter specifies the pyrosensor responsivity in volt per joule [V/J]
            
            </param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.getPyrosensorResponsivity(System.Int16,System.Double@)">
            <summary>
            This function returns the pyrosensor responsivity in volt per joule [V/J]
            
            Notes:
            (1) The function is only available on PM100A, PM100D, PM100USB, PM200, PM400.
            
            </summary>
            <param name="Attribute">
            This parameter specifies the value to be queried.
            
            Acceptable values:
              TLPM_ATTR_SET_VAL  (0): Set value
              TLPM_ATTR_MIN_VAL  (1): Minimum value
              TLPM_ATTR_MAX_VAL  (2): Maximum value
              TLPM_ATTR_DFLT_VAL (3): Default value
            
            </param>
            <param name="Responsivity">
            This parameter returns the specified pyrosensor responsivity in volt per joule [V/J]
            
            </param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.setCurrentAutoRange(System.Boolean)">
            <summary>
            This function sets the current auto range mode.
            
            Notes:
            (1) The function is only available on PM100A, PM100D, PM100USB, PM160, PM200, PM400.
            
            </summary>
            <param name="Current_Autorange_Mode">
            This parameter specifies the current auto range mode.
            
            Acceptable values:
              TLPM_AUTORANGE_CURRENT_OFF (0): current auto range disabled
              TLPM_AUTORANGE_CURRENT_ON  (1): current auto range enabled
            
            </param>
            <returns>
            This value shows the status code returned by the function call.
            
            For Status Codes see function &lt;Error Message&gt;.
            
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.getCurrentAutorange(System.Boolean@)">
            <summary>
            This function returns the current auto range mode.
            
            Notes:
            (1) The function is only available on PM100A, PM100D, PM100USB, PM160, PM200, PM400.
            
            </summary>
            <param name="Current_Autorange_Mode">
            This parameter returns the current auto range mode.
            
            Return values:
              TLPM_AUTORANGE_CURRENT_OFF (0): current auto range disabled
              TLPM_AUTORANGE_CURRENT_ON  (1): current auto range enabled
            
            </param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.setCurrentRange(System.Double)">
            <summary>
            This function sets the sensor's current range.
            
            Notes:
            (1) The function is only available on PM100A, PM100D, PM100USB, PM160, PM200, PM400.
            
            </summary>
            <param name="Current_to_Measure">
            This parameter specifies the current value to be measured in ampere [A].
            
            </param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.getCurrentRange(System.Int16,System.Double@)">
            <summary>
            This function returns the actual current range value.
            
            Notes:
            (1) The function is only available on PM100A, PM100D, PM100USB, PM160, PM200, PM400.
            
            </summary>
            <param name="Attribute">
            This parameter specifies the value to be queried.
            
            Acceptable values:
              TLPM_ATTR_SET_VAL  (0): Set value
              TLPM_ATTR_MIN_VAL  (1): Minimum value
              TLPM_ATTR_MAX_VAL  (2): Maximum value
            
            </param>
            <param name="Current_Value">
            This parameter returns the specified current range value in ampere [A].
            
            </param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.getCurrentRanges(System.Double[],System.UInt16@)">
            <summary>
            This function returns the list of current ranges.
            Notes:
            (1) The function is only available on PM1001, PM103, PM400.
            
            </summary>
            <param name="Current_Values">This parameter returns the specified voltage range value in volts [V].</param>
            <param name="Range_Count"></param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.setCurrentRef(System.Double)">
            <summary>
            This function sets the current reference value.
            
            Notes:
            (1) The function is only available on PM100A, PM100D, PM100USB, PM160, PM200, PM400.
            
            </summary>
            <param name="Current_Reference_Value">
            This parameter specifies the current reference value in amperes [A].
            
            Remark:
            This value is used for calculating differences between the actual current value and this current reference value if Current Reference State is ON.
            
            </param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.getCurrentRef(System.Int16,System.Double@)">
            <summary>
            This function returns the current reference value.
            
            Notes:
            (1) The function is only available on PM100A, PM100D, PM100USB, PM160, PM200, PM400.
            
            </summary>
            <param name="Attribute">
            This parameter specifies the value to be queried.
            
            Acceptable values:
              TLPM_ATTR_SET_VAL  (0): Set value
              TLPM_ATTR_MIN_VAL  (1): Minimum value
              TLPM_ATTR_MAX_VAL  (2): Maximum value
              TLPM_ATTR_DFLT_VAL (3): Default value
            
            </param>
            <param name="Current_Reference_Value">
            This parameter returns the specified current reference value in amperes [A].
            
            Remark:
            This value is used for calculating differences between the actual current value and this current reference value if Current Reference State is ON.
            </param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.setCurrentRefState(System.Boolean)">
            <summary>
            This function sets the current reference state.
            
            Notes:
            (1) The function is only available on PM100A, PM100D, PM100USB, PM160, PM200, PM400.
            
            </summary>
            <param name="Current_Reference_State">
            This parameter specifies the current reference state.
            
            Acceptable values:
              TLPM_CURRENT_REF_OFF (0): Current reference disabled. Absolute measurement.
              TLPM_CURRENT_REF_ON  (1): Current reference enabled. Relative measurement.
            
            </param>
            <returns>
            This value shows the status code returned by the function call.
            
            For Status Codes see function &lt;Error Message&gt;.
            
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.getCurrentRefState(System.Boolean@)">
            <summary>
            This function returns the current reference state.
            
            Notes:
            (1) The function is only available on PM100A, PM100D, PM100USB, PM160, PM200, PM400.
            
            </summary>
            <param name="Current_Reference_State">
            This parameter returns the current reference state.
            
            Return values:
              TLPM_CURRENT_REF_OFF (0): Current reference disabled. Absolute measurement.
              TLPM_CURRENT_REF_ON  (1): Current reference enabled. Relative measurement.
            
            </param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.setEnergyRange(System.Double)">
            <summary>
            This function sets the pyro sensor's energy range.
            
            Notes:
            (1) The function is only available on PM100D, PM100USB, PM200, PM400.
            
            </summary>
            <param name="Energy_to_Measure">
            This parameter specifies the energy value in joule [J] to be measured.
            
            </param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.getEnergyRange(System.Int16,System.Double@)">
            <summary>
            This function returns the pyro sensor's energy range.
            
            Notes:
            (1) The function is only available on PM100D, PM100USB, PM200, PM400.
            
            </summary>
            <param name="Attribute">
            This parameter specifies the value to be queried.
            
            Acceptable values:
              TLPM_ATTR_SET_VAL  (0): Set value
              TLPM_ATTR_MIN_VAL  (1): Minimum value
              TLPM_ATTR_MAX_VAL  (2): Maximum value
            
            </param>
            <param name="Energy_Value">
            This parameter returns the specified pyro sensor's energy value in joule [J].
            
            </param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.setEnergyRef(System.Double)">
            <summary>
            This function sets the pyro sensor's energy reference value
            
            Notes:
            (1) The function is only available on PM100D, PM100USB, PM200, PM400.
            (2) This value is used for calculating differences between the actual energy value and this energy reference value.
            
            </summary>
            <param name="Energy_Reference_Value">
            This parameter specifies the pyro sensor's energy reference value in joule [J].
            
            Remark:
            This value is used for calculating differences between the actual energy value and this energy reference value if Energy Reference State is ON.
            
            </param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.getEnergyRef(System.Int16,System.Double@)">
            <summary>
            This function returns the specified pyro sensor's energy reference value.
            
            Notes:
            (1) The function is only available on PM100D, PM100USB, PM200, PM400.
            (2) The set value is used for calculating differences between the actual energy value and this energy reference value.
            
            </summary>
            <param name="Attribute">
            This parameter specifies the value to be queried.
            
            Acceptable values:
              TLPM_ATTR_SET_VAL  (0): Set value
              TLPM_ATTR_MIN_VAL  (1): Minimum value
              TLPM_ATTR_MAX_VAL  (2): Maximum value
              TLPM_ATTR_DFLT_VAL (3): Default value
            
            </param>
            <param name="Energy_Reference_Value">
            This parameter returns the specified pyro sensor's energy reference value in joule [J].
            
            Remark:
            The set value is used for calculating differences between the actual energy value and this energy reference value if Energy Reference State is ON.
            </param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.setEnergyRefState(System.Boolean)">
            <summary>
            This function sets the instrument's energy reference state.
            
            Notes:
            (1) The function is only available on PM100D, PM100USB, PM200, PM400.
            
            </summary>
            <param name="Energy_Reference_State">
            This parameter specifies the energy reference state.
            
            Acceptable values:
              TLPM_ENERGY_REF_OFF (0): Energy reference disabled. Absolute measurement.
              TLPM_ENERGY_REF_ON  (1): Energy reference enabled. Relative measurement.
            
            </param>
            <returns>
            This value shows the status code returned by the function call.
            
            For Status Codes see function &lt;Error Message&gt;.
            
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.getEnergyRefState(System.Boolean@)">
            <summary>
            This function returns the instrument's energy reference state.
            
            Notes:
            (1) The function is only available on PM100D, PM100USB, PM200, PM400.
            
            </summary>
            <param name="Energy_Reference_State">
            This parameter returns the energy reference state.
            
            Return values:
              TLPM_ENERGY_REF_OFF (0): Energy reference disabled. Absolute measurement.
              TLPM_ENERGY_REF_ON  (1): Energy reference enabled. Relative measurement.
            
            </param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.getFreqRange(System.Double@,System.Double@)">
            <summary>
            This function returns the instruments frequency measurement range.
            
            Remark:
            The frequency of the input signal is calculated over at least 0.3s. So it takes at least 0.3s to get a new frequency value from the instrument.
            
            Notes:
            (1) The function is only available on PM100D, PM100A, and PM100USB.
            
            </summary>
            <param name="Lower_Frequency">
            This parameter returns the lower instruments frequency in [Hz].
            
            </param>
            <param name="Upper_Frequency">
            This parameter returns the upper instruments frequency in [Hz].
            
            </param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.setFreqMode(System.UInt16)">
            <summary>
            This function sets the instruments frequency measurement mode. Only for photodiodes.
            
            Notes:
            (1) The function is only available on PM103
            
            </summary>
            <param name="Frequency_Mode">
            This parameter returns the frequency mode.
            
            CW (0)
            PEAK (1)
            
            </param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.getFreqMode(System.UInt16@)">
            <summary>
            This function returns the instruments frequency measurement mode. 
            
            Notes:
            (1) The function is only available on PM103
            
            </summary>
            <param name="Frequency_Mode">
            This parameter returns the frequency mode.
            
            CW (0)
            PEAK (1)
            
            </param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.setPowerAutoRange(System.Boolean)">
            <summary>
            This function sets the power auto range mode.
            
            </summary>
            <param name="Power_Autorange_Mode">
            This parameter specifies the power auto range mode.
            
            Acceptable values:
              TLPM_AUTORANGE_POWER_OFF (0): power auto range disabled
              TLPM_AUTORANGE_POWER_ON  (1): power auto range enabled
            
            </param>
            <returns>
            This value shows the status code returned by the function call.
            
            For Status Codes see function &lt;Error Message&gt;.
            
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.getPowerAutorange(System.Boolean@)">
            <summary>
            This function returns the power auto range mode.
            
            </summary>
            <param name="Power_Autorange_Mode">
            This parameter returns the power auto range mode.
            
            Return values:
              TLPM_AUTORANGE_POWER_OFF (0): power auto range disabled
              TLPM_AUTORANGE_POWER_ON  (0): power auto range enabled
            
            </param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.setPowerRange(System.Double)">
            <summary>
            This function sets the sensor's power range.
            
            </summary>
            <param name="Power_to_Measure">
            This parameter specifies the most positive signal level expected for the sensor input in watt [W].
            </param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.getPowerRange(System.Int16,System.Double@)">
            <summary>
            This function returns the actual power range value.
            
            </summary>
            <param name="Attribute">
            This parameter specifies the value to be queried.
            
            Acceptable values:
              TLPM_ATTR_SET_VAL  (0): Set value
              TLPM_ATTR_MIN_VAL  (1): Minimum value
              TLPM_ATTR_MAX_VAL  (2): Maximum value
            
            </param>
            <param name="Power_Value">
            This parameter returns the specified power range value in watt [W].
            
            </param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.setPowerRef(System.Double)">
            <summary>
            This function sets the power reference value.
            
            </summary>
            <param name="Power_Reference_Value">
            This parameter specifies the power reference value.
            
            Remark:
            (1) The power reference value has the unit specified with &lt;Set Power Unit&gt;.
            (2) This value is used for calculating differences between the actual power value and this power reference value if Power Reference State is ON.
            
            </param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.getPowerRef(System.Int16,System.Double@)">
            <summary>
            This function returns the power reference value.
            
            </summary>
            <param name="Attribute">
            This parameter specifies the value to be queried.
            
            Acceptable values:
              TLPM_ATTR_SET_VAL  (0): Set value
              TLPM_ATTR_MIN_VAL  (1): Minimum value
              TLPM_ATTR_MAX_VAL  (2): Maximum value
              TLPM_ATTR_DFLT_VAL (3): Default value
            
            </param>
            <param name="Power_Reference_Value">
            This parameter returns the specified power reference value.
            
            Remark:
            (1) The power reference value has the unit specified with &lt;Set Power Unit&gt;.
            (2) This value is used for calculating differences between the actual power value and this power reference value if Power Reference State is ON.
            </param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.setPowerRefState(System.Boolean)">
            <summary>
            This function sets the power reference state.
            
            </summary>
            <param name="Power_Reference_State">
            This parameter specifies the power reference state.
            
            Acceptable values:
              TLPM_POWER_REF_OFF (0): Power reference disabled. Absolute measurement.
              TLPM_POWER_REF_ON  (1): Power reference enabled. Relative measurement.
            
            </param>
            <returns>
            This value shows the status code returned by the function call.
            
            For Status Codes see function &lt;Error Message&gt;.
            
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.getPowerRefState(System.Boolean@)">
            <summary>
            This function returns the power reference state.
            
            </summary>
            <param name="Power_Reference_State">
            This parameter returns the power reference state.
            
            Return values:
              TLPM_POWER_REF_OFF (0): Power reference disabled. Absolute measurement.
              TLPM_POWER_REF_ON  (1): Power reference enabled. Relative measurement.
            
            </param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.setPowerUnit(System.Int16)">
            <summary>
            This function sets the unit of the power value.
            
            </summary>
            <param name="Power_Unit">
            This parameter specifies the unit of the pover value.
            
            Acceptable values:
              TLPM_POWER_UNIT_WATT (0): power in Watt
              TLPM_POWER_UNIT_DBM  (1): power in dBm
            
            </param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.getPowerUnit(System.Int16@)">
            <summary>
            This function returns the unit of the power value.
            
            </summary>
            <param name="Power_Unit">
            This parameter returns the unit of the power value.
            
            Return values:
              TLPM_POWER_UNIT_WATT (0): power in Watt
              TLPM_POWER_UNIT_DBM  (1): power in dBm
            </param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.getPowerCalibrationPointsInformation(System.UInt16,System.Text.StringBuilder,System.Text.StringBuilder,System.UInt16@,System.Text.StringBuilder,System.UInt16@)">
            <summary>
             Only supported in the TLPM driver, NOT in the PM100D driver.
            Queries the customer adjustment header like serial nr, cal date, nr of points at given index
            </summary>
            <param name="Index">Index of the power calibration (range 1...5)</param>
            <param name="Serialnumber">
            Serial Number of the sensor.
            Please provide a buffer of 256 characters
            </param>
            <param name="CalibrationDate">
            Last calibration date of this sensor
            Please provide a buffer of 256 characters.
            </param>
            <param name="Calibration_Points_Count">
            Number of calibration points of the power calibration with this sensor
            </param>
            <param name="Author">
            
            </param>
            <param name="Sensor_Position">
            The position of the sencor switch of a Thorlabs S130C
            1 = 5mW
            2 = 500mW
            </param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.getPowerCalibrationPointsState(System.UInt16,System.Boolean@)">
            <summary>
             Only supported in the TLPM driver, NOT in the PM100D driver.
            Queries the state if the power calibration of this sensor is activated.
            </summary>
            <param name="Index"></param>
            <param name="State">
            State if the user power calibration is activated and used for the power measurements.
            VI_ON: The user power calibration is used
            VI_OFF: The user power calibration is ignored in the power measurements
            </param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.setPowerCalibrationPointsState(System.UInt16,System.Boolean)">
            <summary>
             Only supported in the TLPM driver, NOT in the PM100D driver.
            This function activates/inactivates the power calibration of this sensor.
            </summary>
            <param name="Index">Index of the power calibration (range 1...5)</param>
            <param name="State">
            State if the user power calibration is activated and used for the power measurements.
            VI_ON: The user power calibration is used
            VI_OFF: The user power calibration is ignored in the power measurements
            </param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.getPowerCalibrationPoints(System.UInt16,System.UInt16,System.Double[],System.Double[])">
            <summary>
             Only supported in the TLPM driver, NOT in the PM100D driver.
            Returns a list of wavelength and the corresponding power correction factor.
            </summary>
            <param name="Index"></param>
            <param name="Point_Counts">
            Number of points that are submitted in the wavelength and power correction factors arrays.
            Maximum of 8 wavelength - power correction factors pairs can be calibrated for each sensor.
            </param>
            <param name="Wavelengths">
            Array of wavelengths in nm. Requires ascending wavelength order.
            The array must contain points counts entries.
            </param>
            <param name="Power_Correction_Factors">
            Array of power correction factorw that correspond to the wavelength array. 
            The array must contain points counts entries, same as wavelenght to build wavelength - power correction factors pairs.
            </param>
            <returns>
             This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.setPowerCalibrationPoints(System.UInt16,System.UInt16,System.Double[],System.Double[],System.String,System.UInt16)">
            <summary>
             Only supported in the TLPM driver, NOT in the PM100D driver.
            Sumbits a list of wavelength and the corresponding measured power correction factors to calibrate the power measurement.
            </summary>
            <param name="Index">Index of the power calibration (range 1...5)</param>
            <param name="Point_Counts">
            Number of points that are submitted in the wavelength and power correction factors arrays.
            Maximum of 8 wavelength - power correction factors  pairs can be calibrated for each sensor.
            </param>
            <param name="Wavelengths">
            Array of wavelengths in nm. Requires ascending wavelength order.
            The array must contain points counts entries.
            </param>
            <param name="Powers_Correction_Factors">
            Array of powers correction factors that correspond to the wavelength array. 
            The array must contain points counts entries, same as wavelenght to build wavelength - power correction factors pairs.
            </param>
            <param name="Author">
            Buffer that contains the name of the editor of the calibration.
            Name of Author limited to 19 chars + '\0'
            </param>
            <param name="Sensor_Position">
            The position of the sencor switch of a Thorlabs S130C
            1 = 5mW
            2 = 500mW
            </param>
            <returns>
             This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.reinitSensor">
            <summary>
            To use the user power calibration, the sensor has to be reconnected.
            Either manually remove and reconnect the sensor to the instrument or use this funtion.
            This function will wait 2 seconds until the sensor has been reinitialized.
            </summary>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.setVoltageAutoRange(System.Boolean)">
            <summary>
            This function sets the voltage auto range mode.
            
            Notes:
            (1) The function is only available on PM100D, PM100A, PM100USB, PM160T, PM200, PM400.
            
            </summary>
            <param name="Voltage_Autorange_Mode">
            This parameter specifies the voltage auto range mode.
            
            Acceptable values:
              TLPM_AUTORANGE_VOLTAGE_OFF (0): voltage auto range disabled
              TLPM_AUTORANGE_VOLTAGE_ON  (1): voltage auto range enabled
            
            </param>
            <returns>
            This value shows the status code returned by the function call.
            
            For Status Codes see function &lt;Error Message&gt;.
            
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.getVoltageAutorange(System.Boolean@)">
            <summary>
            This function returns the voltage auto range mode.
            
            Notes:
            (1) The function is only available on PM100D, PM100A, PM100USB, PM160T, PM200, PM400.
            
            </summary>
            <param name="Voltage_Autorange_Mode">
            This parameter returns the voltage auto range mode.
            
            Return values:
              TLPM_AUTORANGE_VOLTAGE_OFF (0): voltage auto range disabled
              TLPM_AUTORANGE_VOLTAGE_ON  (1): voltage auto range enabled
            
            </param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.setVoltageRange(System.Double)">
            <summary>
            This function sets the sensor's voltage range.
            
            Notes:
            (1) The function is only available on PM100D, PM100A, PM100USB, PM160T, PM200, PM400.
            
            </summary>
            <param name="Voltage_to_Measure">
            This parameter specifies the voltage value to be measured in volts [V].
            
            </param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.getVoltageRange(System.Int16,System.Double@)">
            <summary>
            This function returns the actual voltage range value.
            
            Notes:
            (1) The function is only available on PM100D, PM100A, PM100USB, PM160T, PM200, PM400.
            
            </summary>
            <param name="Attribute">
            This parameter specifies the value to be queried.
            
            Acceptable values:
              TLPM_ATTR_SET_VAL  (0): Set value
              TLPM_ATTR_MIN_VAL  (1): Minimum value
              TLPM_ATTR_MAX_VAL  (2): Maximum value
            
            </param>
            <param name="Voltage_Value">
            This parameter returns the specified voltage range value in volts [V].
            
            </param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.getVoltageRanges(System.Double[],System.UInt16@)">
            <summary>
            This function returns the actual voltage range value.
            Notes:
            (1) The function is only available on PM100D, PM100A, PM100USB, PM160T, PM200, PM400.
            
            </summary>
            <param name="Voltage_Values">This parameter returns the specified voltage range value in volts [V].</param>
            <param name="Range_Count"></param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.setVoltageRef(System.Double)">
            <summary>
            This function sets the voltage reference value.
            
            Notes:
            (1) The function is only available on PM100D, PM100A, PM100USB, PM160T, PM200, PM400.
            
            </summary>
            <param name="Voltage_Reference_Value">
            This parameter specifies the voltage reference value in volts [V].
            
            Remark:
            This value is used for calculating differences between the actual voltage value and this voltage reference value if Voltage Reference State is ON.
            
            </param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.getVoltageRef(System.Int16,System.Double@)">
            <summary>
            This function returns the voltage reference value.
            
            Notes:
            (1) The function is only available on PM100D, PM100A, PM100USB, PM160T, PM200, PM400.
            
            </summary>
            <param name="Attribute">
            This parameter specifies the value to be queried.
            
            Acceptable values:
              TLPM_ATTR_SET_VAL  (0): Set value
              TLPM_ATTR_MIN_VAL  (1): Minimum value
              TLPM_ATTR_MAX_VAL  (2): Maximum value
              TLPM_ATTR_DFLT_VAL (3): Default value
            
            </param>
            <param name="Voltage_Reference_Value">
            This parameter returns the specified voltage reference value in volts [V].
            
            Remark:
            This value is used for calculating differences between the actual voltage value and this voltage reference value if Voltage Reference State is ON.
            </param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.setVoltageRefState(System.Boolean)">
            <summary>
            This function sets the voltage reference state.
            
            Notes:
            (1) The function is only available on PM100D, PM100A, PM100USB, PM160T, PM200, PM400.
            
            </summary>
            <param name="Voltage_Reference_State">
            This parameter specifies the voltage reference state.
            
            Acceptable values:
              TLPM_VOLTAGE_REF_OFF (0): Voltage reference disabled. Absolute measurement.
              TLPM_VOLTAGE_REF_ON  (1): Voltage reference enabled. Relative measurement.
            
            </param>
            <returns>
            This value shows the status code returned by the function call.
            
            For Status Codes see function &lt;Error Message&gt;.
            
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.getVoltageRefState(System.Boolean@)">
            <summary>
            This function returns the voltage reference state.
            
            Notes:
            (1) The function is only available on PM100D, PM100A, PM100USB, PM160T, PM200, PM400.
            
            </summary>
            <param name="Voltage_Reference_State">
            This parameter returns the voltage reference state.
            
            Return values:
              TLPM_VOLTAGE_REF_OFF (0): Voltage reference disabled. Absolute measurement.
              TLPM_VOLTAGE_REF_ON  (1): Voltage reference enabled. Relative measurement.
            
            </param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.setPeakThreshold(System.Double)">
            <summary>
            This function sets the peak detector threshold.
            
            Remark:
            Peak detector threshold is in percent [%] of the maximum from the actual measurements range.
            
            Notes:
            (1) The function is only available on PM100D, PM100USB, PM200, PM400.
            
            </summary>
            <param name="Peak_Detector_Threshold">
            This parameter specifies the peak detector threshold.
            
            Remark:
            Peak detector threshold is in percent [%] of the maximum from the actual measurements range.
            </param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.getPeakThreshold(System.Int16,System.Double@)">
            <summary>
            This function returns the peak detector threshold.
            
            Notes:
            (1) The function is only available on PM100D, PM100USB, PM200, PM400.
            
            </summary>
            <param name="Attribute">
            This parameter specifies the value to be queried.
            
            Acceptable values:
              TLPM_ATTR_SET_VAL  (0): Set value
              TLPM_ATTR_MIN_VAL  (1): Minimum value
              TLPM_ATTR_MAX_VAL  (2): Maximum value
              TLPM_ATTR_DFLT_VAL (3): Default value
            
            </param>
            <param name="Peak_Detector_Threshold">
            This parameter returns the peak detector threshold.
            
            Remark:
            Peak detector threshold is in percent [%] of the maximum from the actual measurements range.
            
            </param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.startPeakDetector">
            <summary>
            Starts peak finder. For pyro or photodiode in pulse mode.
            
            Notes:
            (1) The function is only available on PM103
            </summary>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.isPeakDetectorRunning(System.Boolean@)">
            <summary>
            Tests if peak finder is active at the moment. Same as polling status operation register of sensor and checking for bit 3.
            
            Notes:
            (1) The function is only available on PM103
            </summary>
            <param name="Is_Running">
            returns the running state of the peak detector.
            
            VI_TRUE: peak detector is running
            VI_FALSE: peak detector is stopped.
            </param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.setPeakFilter(System.Int16)">
            <summary>
            
            </summary>
            <param name="Filter">
            Valid valus for this parameter are
            0 = NONE
            1 = OVER
            Use OVER if the signal measured is a rectangular signal.
            If it is a sinus or triangle signal use NONE.
            </param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.getPeakFilter(System.Int16@)">
            <summary>
            
            </summary>
            <param name="Filter">
            Valid valus for this parameter are
            0 = NONE
            1 = OVER
            Use OVER if the signal measured is a rectangular signal.
            If it is a sinus or triangle signal use NONE.
            </param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.setExtNtcParameter(System.Double,System.Double)">
            <summary>
            This function sets the temperature calculation coefficients for the NTC sensor externally connected to the instrument (NTC IN).
            
            Notes:
            (1) The function is only available on PM400.
            
            </summary>
            <param name="R0_Coefficient">
            This parameter specifies the R0 coefficient in [Ohm] for calculating the temperature from the sensor's resistance by the beta parameter equation. R0 is the NTC's resistance at T0 (25 ?C = 298.15 K).
            </param>
            <param name="Beta_Coefficient">
            This parameter specifies the B coefficient in [K] for calculating the temperature from the sensor's resistance by the beta parameter equation.
            </param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.getExtNtcParameter(System.Int16,System.Double@,System.Double@)">
            <summary>
            This function gets the temperature calculation coefficients for the NTC sensor externally connected to the instrument (NTC IN).
            
            Notes:
            (1) The function is only available on PM400.
            
            </summary>
            <param name="Attribute">
            This parameter specifies the values to be queried.
            
            Acceptable values:
              TLPM_ATTR_SET_VAL  (0): Set value
              TLPM_ATTR_MIN_VAL  (1): Minimum value
              TLPM_ATTR_MAX_VAL  (2): Maximum value
              TLPM_ATTR_DFLT_VAL (3): Default value
            
            </param>
            <param name="R0_Coefficient">
            This parameter returns the specified R0 coefficient in [Ohm].
            </param>
            <param name="Beta_Coefficient">
            This parameter returns the specified B coefficient in [K].
            </param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.setFilterPosition(System.Boolean)">
            <summary>
            This function sets the current filter position
            
            Notes:
            (1) The function is only available on PM160 with firmware version 1.5.4 and higher
            
            </summary>
            <param name="Filter_Position">
            This parameter specifies the current filter position
            
            Acceptable values:
              VI_OFF (0): Filter position OFF. The filter value will not be used in the power calculation
              VI_ON  (1): Filter position ON, The filter value will be used in the power correction
            
            </param>
            <returns>
            This value shows the status code returned by the function call.
            
            For Status Codes see function &lt;Error Message&gt;.
            
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.getFilterPosition(System.Boolean@)">
            <summary>
            This function returns the current filter position
            
            Notes:
            (1) The function is only available on PM160 with firmware version 1.5.4 and higher
            
            </summary>
            <param name="Filter_Position">
            This parameter returns the current filter position
            
            Acceptable values:
              VI_OFF (0): Filter position OFF. The filter value will not be used in the power calculation
              VI_ON  (1): Filter position ON, The filter value will be used in the power correction
            
            </param>
            <returns>
            This value shows the status code returned by the function call.
            
            For Status Codes see function &lt;Error Message&gt;.
            
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.setFilterAutoMode(System.Boolean)">
            <summary>
            This function enables / disables the automatic filter position detection
            
            Notes:
            (1) The function is only available on PM160 with firmware version 1.5.4 and higher
            
            </summary>
            <param name="Filter_Auto_Position_Detection">
            This parameter specifies if the automatic filter position detection is enabled/disabled
            
            Acceptable values:
              VI_OFF (0): Filter position detection is OFF. The manual set fitler position is used
              VI_ON  (1): Filter position detection is ON, The filter position will be automatically detected
            
            </param>
            <returns>
            This value shows the status code returned by the function call.
            
            For Status Codes see function &lt;Error Message&gt;.
            
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.getFilterAutoMode(System.Boolean@)">
            <summary>
            This function returns if the automatic filter position detection is used
            
            Notes:
            (1) The function is only available on PM160 with firmware version 1.5.4 and higher
            
            </summary>
            <param name="Filter_Auto_Position_Detection">
            This parameter returns if the automatic filter position detection is enabled/disabled
            
            Acceptable values:
              VI_OFF (0): Filter position detection is OFF. The manual set fitler position is used
              VI_ON  (1): Filter position detection is ON, The filter position will be automatically detected
            
            </param>
            <returns>
            This value shows the status code returned by the function call.
            
            For Status Codes see function &lt;Error Message&gt;.
            
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.getAnalogOutputSlopeRange(System.Double@,System.Double@)">
            <summary>
            This function returns range of the responsivity in volts per watt [V/W] for the analog output.
            
            Notes:
            (1) The function is only available on PM101 and PM102
            
            
            </summary>
            <param name="Min_Slope">
            This parameter returns the minimum voltage in Volt [V/W] of the analog output.
            Lower voltage is clipped to the minimum.
            
            </param>
            <param name="Max_Slope">
            This parameter returns the maximum voltage in Volt [V/W] of the analog output.
            Higher voltage values are clipped to the maximum.
            
            </param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.setAnalogOutputSlope(System.Double)">
            <summary>
            This function sets the responsivity in volts per watt [V/W] for the analog output.
            
            Notes:
            (1) The function is only available on PM101 and PM102
            
            </summary>
            <param name="Slope">
            This parameter specifies the responsivity in volts per watt [V/W].
            
            </param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.getAnalogOutputSlope(System.Int16,System.Double@)">
            <summary>
            This function returns the responsivity in volts per watt [V/W] for the analog output.
            
            Notes:
            (1) The function is only available on PM101 and PM102
            
            
            </summary>
            <param name="Attribute">
            This parameter specifies the value to be queried.
            
            Acceptable values:
              TLPM_ATTR_SET_VAL  (0): Set value
              TLPM_ATTR_MIN_VAL  (1): Minimum value
              TLPM_ATTR_MAX_VAL  (2): Maximum value
              TLPM_ATTR_DFLT_VAL (3): Default value
            
            </param>
            <param name="Slope">
            This parameter returns the specified responsivity in volts per watt [V/W].
            
            </param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.getAnalogOutputVoltageRange(System.Double@,System.Double@)">
            <summary>
            This function returns the range in Volt [V] of the analog output.
            
            Notes:
            (1) The function is only available on PM101 and PM102
            
            
            </summary>
            <param name="Min_Voltage">
            This parameter returns the minimum voltage in Volt [V] of the analog output.
            Lower voltage is clipped to the minimum.
            
            </param>
            <param name="Max_Voltage">
            This parameter returns the maximum voltage in Volt [V] of the analog output.
            Higher voltage values are clipped to the maximum.
            
            </param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.getAnalogOutputVoltage(System.Int16,System.Double@)">
            <summary>
            This function returns the analog output in Volt [V].
            
            Notes:
            (1) The function is only available on PM101 and PM102
            
            
            </summary>
            <param name="Attribute">
            This parameter specifies the value to be queried.
            
            Acceptable values:
              TLPM_ATTR_SET_VAL  (0): Set value
              TLPM_ATTR_MIN_VAL  (1): Minimum value
              TLPM_ATTR_MAX_VAL  (2): Maximum value
              TLPM_ATTR_DFLT_VAL (3): Default value
            
            </param>
            <param name="Voltage">
            This parameter returns the analog output in Volt [V].
            
            </param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.getAnalogOutputHub(System.Double@)">
            <summary>
            This function returns the analog output hub in Volt [V].
            
            Notes:
            (1) The function is only available on PM103
            
            
            </summary>
            <param name="Voltage">
            This parameter returns the analog output hub in Volt [V].
            
            </param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.setAnalogOutputHub(System.Double)">
            <summary>
            This function returns the analog output hub in Volt [V].
            
            Notes:
            (1) The function is only available on PM103
            
            
            </summary>
            <param name="Voltage">
            This parameter returns the analog output hub in Volt [V].
            
            </param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.getPositionAnalogOutputSlopeRange(System.Double@,System.Double@)">
            <summary>
            This function returns range of the responsivity in volts per ?m [V/?m] for the analog output.
            
            Notes:
            (1) The function is only available on PM102
            
            
            </summary>
            <param name="Min_Slope">
            This parameter returns the minimum slope in [V/?m] of the analog output.
            
            </param>
            <param name="Max_Slope">
            This parameter returns the maximum slope in [V/?m] of the analog output.
            
            </param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.setPositionAnalogOutputSlope(System.Double)">
            <summary>
            This function sets the responsivity in volts per ?m [V/?m] for the analog output.
            
            Notes:
            (1) The function is only available on PM102
            
            </summary>
            <param name="Slope">
            This parameter specifies the responsivity in volts per ?m [V/?m] for the AO2 and AO3 channel 
            
            </param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.getPositionAnalogOutputSlope(System.Int16,System.Double@)">
            <summary>
            This function returns the responsivity in volts per ?m [V/?m] for the analog output channels.
            
            Notes:
            (1) The function is only available on PM102
            
            
            </summary>
            <param name="Attribute">
            This parameter specifies the value to be queried.
            
            Acceptable values:
              TLPM_ATTR_SET_VAL  (0): Set value
              TLPM_ATTR_MIN_VAL  (1): Minimum value
              TLPM_ATTR_MAX_VAL  (2): Maximum value
              TLPM_ATTR_DFLT_VAL (3): Default value
            
            </param>
            <param name="Slope">
            This parameter returns the specified responsivity in volts per ?m [V/?m] for the AO2 and AO3 channel 
            
            </param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.getPositionAnalogOutputVoltageRange(System.Double@,System.Double@)">
            <summary>
            This function returns the range in Volt [V] of the analog output.
            
            Notes:
            (1) The function is only available on PM102
            
            
            </summary>
            <param name="Min_Voltage">
            This parameter returns the minimum voltage in Volt [V] of the analog output.
            Lower voltage is clipped to the minimum.
            
            </param>
            <param name="Max_Voltage">
            This parameter returns the maximum voltage in Volt [V] of the analog output.
            Higher voltage values are clipped to the maximum.
            
            </param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.getPositionAnalogOutputVoltage(System.Int16,System.Double@,System.Double@)">
            <summary>
            This function returns the analog output in Volt [V].
            
            Notes:
            (1) The function is only available on PM102
            
            
            </summary>
            <param name="Attribute">
            This parameter specifies the value to be queried.
            
            Acceptable values:
              TLPM_ATTR_SET_VAL  (0): Set value
              TLPM_ATTR_MIN_VAL  (1): Minimum value
              TLPM_ATTR_MAX_VAL  (2): Maximum value
              TLPM_ATTR_DFLT_VAL (3): Default value
            
            </param>
            <param name="Voltage_X">
            This parameter returns the analog output in Volt [V] for the AO2 channel ( x direction)
            
            </param>
            <param name="Voltage_Y">
            This parameter returns the analog output in Volt [V] for the AO3 channel ( y direction)
            
            </param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.getMeasPinMode(System.Boolean@)">
            <summary>
            This function returns the meas pin state
            
            Notes:
            (1) The function is only available on PM103
            
            
            </summary>
            <param name="State">
            This parameter returns the analog output hub in Volt [V].
            
            </param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.getMeasPinPowerLevel(System.Double@)">
            <summary>
            This function returns the meas pin power level in [W]
            
            Notes:
            (1) The function is only available on PM103
            
            
            </summary>
            <param name="Level">
            This parameter returns the measure pin output power level in Watt [W].
            
            </param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.setMeasPinPowerLevel(System.Double)">
            <summary>
            This function returns the meas pin state
            
            Notes:
            (1) The function is only available on PM103
            
            
            </summary>
            <param name="Level">
            This parameter sets the measure pin output power level in Watt [W].
            
            
            </param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.getMeasPinEnergyLevel(System.Double@)">
            <summary>
            This function returns the meas pin energy level in [J]
            
            Notes:
            (1) The function is only available on PM103
            
            
            </summary>
            <param name="Level">
            This parameter returns the measure pin output energy level in  [J].
            
            
            </param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.setMeasPinEnergyLevel(System.Double)">
            <summary>
            This function returns the meas pin state
            
            Notes:
            (1) The function is only available on PM103
            
            
            </summary>
            <param name="Level">
            This parameter returns the measurement pin energy level in [J].
            
            </param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.setNegativePulseWidth(System.Double)">
            <summary>
            This function sets the low pulse duration in Seconds
            
            Notes:
            (1) The function is only available on PM103
            
            </summary>
            <param name="Pulse_Duration">
            low pulse duration in Seconds
            </param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.setPositivePulseWidth(System.Double)">
            <summary>
            This function sets the high pulse duration in Seconds
            
            Notes:
            (1) The function is only available on PM103
            
            </summary>
            <param name="Pulse_Duration">
            high pulse duration in Seconds
            </param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.setNegativeDutyCycle(System.Double)">
            <summary>
            This function sets the low duty cycle in Percent
            
            Notes:
            (1) The function is only available on PM103
            
            </summary>
            <param name="Duty_Cycle">
            low pulse duty cycle in Percent
            </param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.setPositiveDutyCycle(System.Double)">
            <summary>
            This function sets the high duty cycle in Percent
            
            Notes:
            (1) The function is only available on PM103
            
            </summary>
            <param name="Duty_Cycle">
            high pulse duty cycle in Percent
            </param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.measCurrent(System.Double@)">
            <summary>
            This function is used to obtain current readings from the instrument. 
            
            Remark:
            This function starts a new measurement cycle and after finishing measurement the result is received. Subject to the actual Average Count this may take up to seconds. Refer to &lt;Set/Get Average Count&gt;. 
            
            Notes:
            (1) The function is only available on PM100D, PM100A, PM100USB, PM160, PM200, PM400.
            
            </summary>
            <param name="Current">
            This parameter returns the current in amperes [A].
            
            Remark:
            This function starts a new measurement cycle and after finishing measurement the result is received. Subject to the actual Average Count this may take up to seconds. Refer to &lt;Set/Get Average Count&gt;. 
            
            </param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.measVoltage(System.Double@)">
            <summary>
            This function is used to obtain voltage readings from the instrument. 
            
            Remark:
            This function starts a new measurement cycle and after finishing measurement the result is received. Subject to the actual Average Count this may take up to seconds. Refer to &lt;Set/Get Average Count&gt;. 
            
            Notes:
            (1) The function is only available on PM100D, PM100A, PM100USB, PM160T, PM200, PM400.
            
            </summary>
            <param name="Voltage">
            This parameter returns the voltage in volts [V].
            
            Remark:
            This function starts a new measurement cycle and after finishing measurement the result is received. Subject to the actual Average Count this may take up to seconds. Refer to &lt;Set/Get Average Count&gt;. 
            
            </param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.measPower(System.Double@)">
            <summary>
            This function is used to obtain power readings from the instrument. 
            
            Remark:
            This function starts a new measurement cycle and after finishing measurement the result is received. Subject to the actual Average Count this may take up to seconds. Refer to &lt;Set/Get Average Count&gt;. 
            </summary>
            <param name="Power">
            This parameter returns the power in the selected unit.
            
            Remark:
            (1) This function starts a new measurement cycle and after finishing measurement the result is received. Subject to the actual Average Count this may take up to seconds. Refer to &lt;Set/Get Average Count&gt;. 
            (2) Select the unit with &lt;Set Power Unit&gt;.
            </param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.measEnergy(System.Double@)">
            <summary>
            This function is used to obtain energy readings from the instrument. 
            
            Notes:
            (1) The function is only available on PM100D, PM100USB, PM200, PM400.
            
            </summary>
            <param name="Energy">
            This parameter returns the actual measured energy value in joule [J].
            
            Remark:
            This function starts a new measurement cycle and after finishing measurement the result is received. Subject to the actual Average Count this may take up to seconds. Refer to &lt;Set/Get Average Count&gt;. 
            </param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.measPowerDens(System.Double@)">
            <summary>
            This function is used to obtain power density readings from the instrument. 
            
            Notes:
            (1) The function is only available on PM100D, PM100A, PM100USB, PM200, PM400.
            
            </summary>
            <param name="Power_Density">
            This parameter returns the actual measured power density in watt per square centimeter [W/cm?].
            
            Remark:
            This function starts a new measurement cycle and after finishing measurement the result is received. Subject to the actual Average Count this may take up to seconds. Refer to &lt;Set/Get Average Count&gt;.
            </param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.measEnergyDens(System.Double@)">
            <summary>
            This function is used to obtain energy density readings from the instrument. 
            
            Notes:
            (1) The function is only available on PM100D, PM100USB, PM200, PM400.
            
            </summary>
            <param name="Energy_Density">
            This parameter returns the actual measured energy in joule per square centimeter [J/cm?].
            
            Remark:
            This function starts a new measurement cycle and after finishing measurement the result is received. Subject to the actual Average Count this may take up to seconds. Refer to &lt;Set/Get Average Count&gt;.
            </param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.measFreq(System.Double@)">
            <summary>
            This function is used to obtain frequency readings from the instrument. 
            
            Notes:
            (1) The function is only available on PM100D, PM100A, PM100USB, PM200, PM400.
            
            </summary>
            <param name="Frequency">
            This parameter returns the actual measured frequency of the input signal. 
            </param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.measAuxAD0(System.Double@)">
            <summary>
            This function is used to obtain voltage readings from the instrument's auxiliary AD0 input. 
            
            Notes:
            (1) The function is only available on PM200, PM400.
            
            </summary>
            <param name="Voltage">
            This parameter returns the voltage in volt.
            </param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.measAuxAD1(System.Double@)">
            <summary>
            This function is used to obtain voltage readings from the instrument's auxiliary AD1 input. 
            
            Notes:
            (1) The function is only available on PM200, PM400.
            
            </summary>
            <param name="Voltage">
            This parameter returns the voltage in volt.
            </param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.measEmmHumidity(System.Double@)">
            <summary>
            This function is used to obtain relative humidity readings from the Environment Monitor Module (EMM) connected to the instrument. 
            
            Notes:
            (1) The function is only available on PM200, PM400.
            (2) The function will return an error when no EMM is connected.
            </summary>
            <param name="Humidity">
            This parameter returns the relative humidity in %.
            </param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.measEmmTemperature(System.Double@)">
            <summary>
            This function is used to obtain temperature readings from the Environment Monitor Module (EMM) connected to the instrument. 
            
            Notes:
            (1) The function is only available on PM200, PM400.
            (2) The function will return an error when no EMM is connected.
            </summary>
            <param name="Temperature">
            This parameter returns the temperature in ?C
            </param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.measExtNtcTemperature(System.Double@)">
            <summary>
            This function gets temperature readings from the external thermistor sensor connected to the instrument (NTC IN). 
            
            Notes:
            (1) The function is only available on PM400.
            (2) The function will return an error when no external sensor is connected.
            
            </summary>
            <param name="Temperature">
            This parameter returns the temperature in ?C
            </param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.measExtNtcResistance(System.Double@)">
            <summary>
            This function gets resistance readings from the external thermistor sensor connected to the instrument (NTC IN). 
            
            Notes:
            (1) The function is only available on PM400.
            (2) The function will return an error when no external sensor is connected.
            
            </summary>
            <param name="Resistance">
            This parameter returns the resistance in Ohm
            </param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.meas4QPositions(System.Double@,System.Double@)">
             <summary>
              Only supported in the TLPM driver, NOT in the PM100D driver.
             This function returns the x and position of a 4q sensor
            Notes:
            (1) The function is only available on PM101, PM102, PM400.
             </summary>
             <param name="xPosition">This parameter returns the actual measured x position in µm</param>
             <param name="yPosition">This parameter returns the actual measured x position in µm</param>
             <returns>
             This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
             </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.meas4QVoltages(System.Double@,System.Double@,System.Double@,System.Double@)">
             <summary>
              Only supported in the TLPM driver, NOT in the PM100D driver.
             This function returns the voltage of each sector of a 4q sensor
             Notes:
            (1) The function is only available on PM101, PM102, PM400.
             </summary>
             <param name="voltage1">This parameter returns the actual measured voltage of the upper left sector of a 4q sensor.</param>
             <param name="voltage2"></param>
             <param name="voltage3"></param>
             <param name="voltage4"></param>
             <returns>
             This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
             </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.measNegPulseWidth(System.Double@)">
            <summary>
            This function returns the negative pulse width in sec.
            Notes:
            (1) The function is only available on PM103.
            
            </summary>
            <param name="Negative_Pulse_Width">
            Negative Pulse Width in sec.
            </param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.measPosPulseWidth(System.Double@)">
            <summary>
            This function returns the positive pulse width in µsec.
            Notes:
            (1) The function is only available on PM103.
            
            </summary>
            <param name="Positive_Pulse_Width">
            Positive Pulse Width in µsec.
            </param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.measNegDutyCycle(System.Double@)">
            <summary>
            This function returns the negative duty cycle in percentage.
            Notes:
            (1) The function is only available on PM103.
            
            </summary>
            <param name="Negative_Duty_Cycle">
            Negative Duty Cycle in percentage.
            </param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.measPosDutyCycle(System.Double@)">
            <summary>
            This function returns the positive duty cycle in percentage.
            Notes:
            (1) The function is only available on PM103.
            
            </summary>
            <param name="Positive_Duty_Cycle">
            Positive Duty Cycle in percentage.
            </param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.resetFastArrayMeasurement">
            <summary>
            This function resets the array measurement. 
            Note: The function is only available on PM103.
            </summary>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.confPowerFastArrayMeasurement">
            <summary>
            This function is used to conffiure the fast array measurement of power values.
            After calling this method, wait some milliseconds to call the method TLPM_getNextFastArrayMeasurement.
            
            Remark:
            This function starts a new measurement cycle and after finishing measurement the result is received.Subject to the actual Average Count this may take up to seconds. 
            
            Note: The function is only available on PM103.
            </summary>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.confCurrentFastArrayMeasurement">
            <summary>
            This function is used to conffiure the fast array measurement of current values.
            After calling this method, wait some milliseconds to call the method TLPM_getNextFastArrayMeasurement.
            
            Remark:
            This function starts a new measurement cycle and after finishing measurement the result is received.Subject to the actual Average Count this may take up to seconds. 
            
            Note: The function is only available on PM103.
            </summary>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.confVoltageFastArrayMeasurement">
            <summary>
            This function is used to conffiure the fast array measurement of voltage values.
            After calling this method, wait some milliseconds to call the method TLPM_getNextFastArrayMeasurement.
            
            Remark:
            This function starts a new measurement cycle and after finishing measurement the result is received.Subject to the actual Average Count this may take up to seconds.  
            
            Note: The function is only available on PM103.
            </summary>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.confPDensityFastArrayMeasurement">
            <summary>
            This function is used to conffiure the fast array measurement of P density values.
            After calling this method, wait some milliseconds to call the method TLPM_getNextFastArrayMeasurement.
            
            Remark:
            This function starts a new measurement cycle and after finishing measurement the result is received.Subject to the actual Average Count this may take up to seconds. 
            
            Note: The function is only available on PM103.
            </summary>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.confEnergyFastArrayMeasurement">
            <summary>
            This function is used to configure the fast array measurement of E energy values.
            After calling this method, wait some milliseconds to call the method TLPM_getNextFastArrayMeasurement.
            
            Remark:
            This function starts a new measurement cycle and after finishing measurement the result is received.Subject to the actual Average Count this may take up to seconds. 
            
            Note: The function is only available on PM103.
            </summary>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.confEDensityFastArrayMeasurement">
            <summary>
            This function is used to configure the fast array measurement of E density values.
            After calling this method, wait some milliseconds to call the method TLPM_getNextFastArrayMeasurement.
            Remark:
            This function starts a new measurement cycle and after finishing measurement the result is received.Subject to the actual Average Count this may take up to seconds. 
            
            Note: The function is only available on PM103.
            </summary>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.getNextFastArrayMeasurement(System.UInt16@,System.UInt32[],System.Single[])">
            <summary>
            This function is used to obtain measurements from the instrument. 
            The result are timestamp - value pairs.
            
            Remark:
            This function starts a new measurement cycle and after finishing measurement the result is received.Subject to the actual Average Count this may take up to seconds. 
            
            Note: The function is only available on PM103.
            </summary>
            <param name="count">The count of timestamp - measurement value pairs. The value will be 100</param>
            <param name="timestamps">Buffer containing up to 100 timestamps. This are raw timestamps and are NOT in ms.</param>
            <param name="values">Buffer containing up to 100 measurement values.</param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.getFastMaxSamplerate(System.UInt32@)">
            <summary>
            This function is used to obtain the maximal possible sample rate (Hz) 
            Note: The function is only available on PM103.
            </summary>
            <param name="maxSampleRate">Max possible sample rate (Hz)</param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.confPowerMeasurementSequence(System.UInt32)">
            <summary>
            This function send the SCPI Command "CONF:ARR:POW" to the device.
            Then is possible to call the method getMeasurementSequence to get the power data.
             
            Duration of measurement in µsec = Count * Interval
            The maximum capture time is 1 sec regardless of the used interval
            Set the bandwidth to high(setInputFilterState to OFF) and disable auto ranging(setPowerAutoRange to OFF)
            
            Note: The function is only available on PM103. 
            </summary>
            <param name="averagingLimit">interval between two measurements in the array in µsec.
            The maximum resolution is 100 µsec without averaging</param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.confPowerMeasurementSequenceHWTrigger(System.UInt32,System.UInt32)">
            <summary>
            This function send the SCPI Command "CONF:ARR:HWTrig:POW" to the device.
            Then is possible to call the method getMeasurementSequenceHWTrigger to get the power data.
             
            Set the bandwidth to high(setInputFilterState to OFF) and disable auto ranging(setPowerAutoRange to OFF)
            
            Note: The function is only available on PM103. 
            </summary>
            <param name="averagingLimit">interval between two measurements in the array in µsec. The maximum resolution is 100 µsec without averaging</param>
            <param name="triggerHorizontalPosition">Sets the horizontal position of trigger condition in the scope catpure (Between 1 and 9999)</param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.confCurrentMeasurementSequence(System.UInt32)">
            <summary>
            This function send the SCPI Command "CONF:ARR:CURR" to the device.
            Then is possible to call the method getMeasurementSequence to get the power data.
            
            Duration of measurement in µsec = Count* Interval
            The maximum capture time is 1 sec regardless of the used interval
            Set the bandwidth to high(setInputFilterState to OFF) and disable auto ranging(setPowerAutoRange to OFF)
            
            Note: The function is only available on PM103.
            </summary>
            <param name="averagingLimit">interval between two measurements in the array in µsec.
            The maximum resolution is 100 µsec without averaging</param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.confCurrentMeasurementSequenceHWTrigger(System.UInt32,System.UInt32)">
            <summary>
            This function send the SCPI Command "CONF:ARR:HWTrig:CURR" to the device.
            Then is possible to call the method getMeasurementSequenceHWTrigger to get the power data.
             
            Set the bandwidth to high(setInputFilterState to OFF) and disable auto ranging(setPowerAutoRange to OFF)
            
            Note: The function is only available on PM103. 
            </summary>
            <param name="averagingLimit">interval between two measurements in the array in µsec. The maximum resolution is 100 µsec without averaging</param>
            <param name="triggerHorizontalPosition">Sets the horizontal position of trigger condition in the scope catpure (Between 1 and 9999)</param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.startMeasurementSequence(System.UInt32,System.Boolean@)">
            <summary>
            This function send the SCPI Command "INIT" to the device.
            Then it calls TLPM_readRegister for the register TLPM_REG_OPER_COND if there is new data to read
            
            If this method is successfull you can call getMeasurementSequence or getMeasurementSequenceHWTrigger
            
            Note: The function is only available on PM103. 
            
            
            </summary>
            <param name="AutoTriggerDelay">
            The unit of this parameter is milliseconds.
            If this parameter bigger then zero, the method will
            wait the time in milliseconds to send the SCPI command:"TRIGer:ARRay:FORce".
            
            This command will force the measurement. 
            </param>
            <param name="TriggerForced">
            Return parameter is TRUE if the command:"TRIGer:ARRay:FORce". was internally send to the device. See parameter "AutoTriggerDelay".
            </param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.getMeasurementSequence(System.UInt32,System.Single[],System.Single[])">
            <summary> 
             Should be called if the methods confPowerMeasurementSequence and startMeasurementSequence were called first.
             
            This function filles the given array with (100 * baseTime) measurements from the device.
            
            Duration of measurement in µsec = Count* Interval
            The maximum capture time is 1 sec regardless of the used inteval
            Set the bandwidth to high(setInputFilterState to OFF) and disable auto ranging(setPowerAutoRange to OFF)
            
            Note: The function is only available on PM103.
            </summary>
            <param name="baseTime">The amount of samples to collect in the internal interation of the method. The value can be from 1 to 100.</param>
            <param name="timeStamps">Array of time stamps in ms. The size of this array is 100 * baseTime.</param>
            <param name="values">Array of power/current measurements. The size of this array is 100 * baseTime.</param>
            <returns></returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.getMeasurementSequenceHWTrigger(System.UInt32,System.Single[],System.Single[])">
            <summary>  
            Should be called if the method confPowerMeasurementSequenceHWTrigger and startMeasurementSequence were called first,
            
            This function filles the given array with (100 * baseTime) measurements from the device, external triggered.
            Set the bandwidth to high(setInputFilterState to OFF) and disable auto ranging(setPowerAutoRange to OFF)
            
            Note: The function is only available on PM103. 
            </summary>
            <param name="baseTime">The amount of samples to collect in the internal interation of the method. The value can be from 1 to 100.</param>
            <param name="timeStamps">Array of time stamps in ms. The size of this array is 100 * baseTime.</param>
            <param name="values">Array of power/current measurements. The size of this array is 100 * baseTime.</param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.setDigIoDirection(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            This function sets the digital I/O port direction.
            
            Note: The function is only available on PM200 and PM400.
            </summary>
            <param name="IO_0">
            This parameter specifies the I/O port #0 direction.
            
            Input:  VI_OFF (0)
            Output: VI_ON  (1)
            
            </param>
            <param name="IO_1">
            This parameter specifies the I/O port #1 direction.
            
            Input:  VI_OFF (0)
            Output: VI_ON  (1)
            
            </param>
            <param name="IO_2">
            This parameter specifies the I/O port #2 direction.
            
            Input:  VI_OFF (0)
            Output: VI_ON  (1)
            
            </param>
            <param name="IO_3">
            This parameter specifies the I/O port #3 direction.
            
            Input:  VI_OFF (0)
            Output: VI_ON  (1)
            
            </param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.getDigIoDirection(System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@)">
            <summary>
            This function returns the digital I/O port direction.
            
            Note: The function is only available on PM200 and PM400.
            </summary>
            <param name="IO_0">
            This parameter returns the I/O port #0 direction where VI_OFF (0) indicates input and VI_ON (1) indicates output.
            
            Note: You may pass VI_NULL if you don't need this value.
            
            </param>
            <param name="IO_1">
            This parameter returns the I/O port #1 direction where VI_OFF (0) indicates input and VI_ON (1) indicates output.
            
            Note: You may pass VI_NULL if you don't need this value.
            
            </param>
            <param name="IO_2">
            This parameter returns the I/O port #2 direction where VI_OFF (0) indicates input and VI_ON (1) indicates output.
            
            Note: You may pass VI_NULL if you don't need this value.
            
            </param>
            <param name="IO_3">
            This parameter returns the I/O port #3 direction where VI_OFF (0) indicates input and VI_ON (1) indicates output.
            
            Note: You may pass VI_NULL if you don't need this value.
            
            </param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.setDigIoOutput(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            This function sets the digital I/O outputs.
            
            Notes:
            (1) Only ports configured as outputs are affected by this function. Use &lt;Set Digital I/O Direction&gt; to configure ports as outputs.
            (2) The function is only available on PM200 and PM400.
            </summary>
            <param name="IO_0">
            This parameter specifies the I/O port #0 output.
            
            Low level:  VI_OFF (0)
            High level: VI_ON  (1)
            
            </param>
            <param name="IO_1">
            This parameter specifies the I/O port #1 output.
            
            Low level:  VI_OFF (0)
            High level: VI_ON  (1)
            
            </param>
            <param name="IO_2">
            This parameter specifies the I/O port #2 output.
            
            Low level:  VI_OFF (0)
            High level: VI_ON  (1)
            
            </param>
            <param name="IO_3">
            This parameter specifies the I/O port #3 output.
            
            Low level:  VI_OFF (0)
            High level: VI_ON  (1)
            
            </param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.getDigIoOutput(System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@)">
            <summary>
            This function returns the digital I/O output settings.
            
            Note: The function is only available on PM200 and PM400.
            </summary>
            <param name="IO_0">
            This parameter returns the I/O port #0 output where VI_OFF (0) indicates low level and VI_ON (1) indicates high level.
            
            Note: You may pass VI_NULL if you don't need this value.
            
            </param>
            <param name="IO_1">
            This parameter returns the I/O port #1 output where VI_OFF (0) indicates low level and VI_ON (1) indicates high level.
            
            Note: You may pass VI_NULL if you don't need this value.
            
            </param>
            <param name="IO_2">
            This parameter returns the I/O port #2 output where VI_OFF (0) indicates low level and VI_ON (1) indicates high level.
            
            Note: You may pass VI_NULL if you don't need this value.
            
            </param>
            <param name="IO_3">
            This parameter returns the I/O port #3 output where VI_OFF (0) indicates low level and VI_ON (1) indicates high level.
            
            Note: You may pass VI_NULL if you don't need this value.
            
            </param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.getDigIoPort(System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@)">
            <summary>
            This function returns the actual digital I/O port level.
            
            Note: The function is only available on PM200 and PM400.
            </summary>
            <param name="IO_0">
            This parameter returns the I/O port #0 level where VI_OFF (0) indicates low level and VI_ON (1) indicates high level.
            
            Note: You may pass VI_NULL if you don't need this value.
            
            </param>
            <param name="IO_1">
            This parameter returns the I/O port #1 level where VI_OFF (0) indicates low level and VI_ON (1) indicates high level.
            
            Note: You may pass VI_NULL if you don't need this value.
            
            </param>
            <param name="IO_2">
            This parameter returns the I/O port #2 level where VI_OFF (0) indicates low level and VI_ON (1) indicates high level.
            
            Note: You may pass VI_NULL if you don't need this value.
            
            </param>
            <param name="IO_3">
            This parameter returns the I/O port #3 level where VI_OFF (0) indicates low level and VI_ON (1) indicates high level.
            
            Note: You may pass VI_NULL if you don't need this value.
            
            </param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.setDigIoPinMode(System.Int16,System.UInt16)">
            <summary>
            This function sets the digital I/O port direction.
            
            Note: The function is only available on PM200, PM400 and PM103
            </summary>
            <param name="Pin_Number">
            Number of the Pin.
            
            Range: 1-7
            </param>
            <param name="Pin_Mode">
            This parameter specifies the I/O port direction.
            
            Input:       DIGITAL_IO_CONFIG_INPUT   (0)
            Output:      DIGITAL_IO_CONFIG_OUTPUT  (1)
            Alternative: DIGITAL_IO_CONFIG_ALT     (2)
            
            </param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.getDigIoPinMode(System.Int16,System.UInt16@)">
            <summary>
            This function returns the digital I/O port direction.
            
            Note: The function is only available on PM200, PM400 and PM103
            </summary>
            <param name="Pin_Number">
            Number of the Pin.
            
            Range: 1-7
            </param>
            <param name="Pin_Mode">
            This parameter returns the I/O port #0 direction.
            
            Note: You may pass VI_NULL if you don't need this value.
            
            Input:              DIGITAL_IO_CONFIG_INPUT      (0)
            Output:             DIGITAL_IO_CONFIG_OUTPUT     (1)
            Input Alternative:  DIGITAL_IO_CONFIG_INPUT_ALT  (2)
            Output Alternative: DIGITAL_IO_CONFIG_OUTPUT_ALT (3)
            
            
            
            </param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.setDigIoPinOutput(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            This function sets the digital I/O outputs.
            
            Notes:
            (1) Only ports configured as outputs are affected by this function. Use &lt;Set Digital I/O Direction&gt; to configure ports as outputs.
            (2) The function is only available on PM200 and PM400.
            </summary>
            <param name="IO_0">
            This parameter specifies the I/O port #0 output.
            
            Low level:  VI_OFF (0)
            High level: VI_ON  (1)
            
            </param>
            <param name="IO_1">
            This parameter specifies the I/O port #1 output.
            
            Low level:  VI_OFF (0)
            High level: VI_ON  (1)
            
            </param>
            <param name="IO_2">
            This parameter specifies the I/O port #2 output.
            
            Low level:  VI_OFF (0)
            High level: VI_ON  (1)
            
            </param>
            <param name="IO_3">
            This parameter specifies the I/O port #3 output.
            
            Low level:  VI_OFF (0)
            High level: VI_ON  (1)
            
            </param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.getDigIoPinOutput(System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@)">
            <summary>
            This function returns the digital I/O output settings.
            
            Note: The function is only available on PM200 and PM400.
            </summary>
            <param name="IO_0">
            This parameter returns the I/O port #0 output where VI_OFF (0) indicates low level and VI_ON (1) indicates high level.
            
            Note: You may pass VI_NULL if you don't need this value.
            
            </param>
            <param name="IO_1">
            This parameter returns the I/O port #1 output where VI_OFF (0) indicates low level and VI_ON (1) indicates high level.
            
            Note: You may pass VI_NULL if you don't need this value.
            
            </param>
            <param name="IO_2">
            This parameter returns the I/O port #2 output where VI_OFF (0) indicates low level and VI_ON (1) indicates high level.
            
            Note: You may pass VI_NULL if you don't need this value.
            
            </param>
            <param name="IO_3">
            This parameter returns the I/O port #3 output where VI_OFF (0) indicates low level and VI_ON (1) indicates high level.
            
            Note: You may pass VI_NULL if you don't need this value.
            
            </param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.getDigIoPinInput(System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@)">
            <summary>
            This function returns the actual digital I/O port level.
            
            Note: The function is only available on PM200 and PM400.
            </summary>
            <param name="IO_0">
            This parameter returns the I/O port #0 level where VI_OFF (0) indicates low level and VI_ON (1) indicates high level.
            
            Note: You may pass VI_NULL if you don't need this value.
            
            </param>
            <param name="IO_1">
            This parameter returns the I/O port #1 level where VI_OFF (0) indicates low level and VI_ON (1) indicates high level.
            
            Note: You may pass VI_NULL if you don't need this value.
            
            </param>
            <param name="IO_2">
            This parameter returns the I/O port #2 level where VI_OFF (0) indicates low level and VI_ON (1) indicates high level.
            
            Note: You may pass VI_NULL if you don't need this value.
            
            </param>
            <param name="IO_3">
            This parameter returns the I/O port #3 level where VI_OFF (0) indicates low level and VI_ON (1) indicates high level.
            
            Note: You may pass VI_NULL if you don't need this value.
            
            </param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.errorQuery(System.Int32@,System.Text.StringBuilder)">
            <summary>
            This function queries the instrument's error queue manually. 
            Use this function to query the instrument's error queue if the driver's error query mode is set to manual query. 
            
            Notes:
            (1) The returned values are stored in the drivers error store. You may use &lt;Error Message&gt; to get a descriptive text at a later point of time.
            </summary>
            <param name="Error_Number">
            This parameter returns the instrument error number.
            
            Notes:
            (1) You may pass VI_NULL if you don't need this value.
            
            </param>
            <param name="Error_Message">
            This parameter returns the instrument error message.
            
            Notes:
            (1) The array must contain at least TLPM_ERR_DESCR_BUFFER_SIZE (512) elements ViChar[512].
            (2) You may pass VI_NULL if you do not need this value.
            
            </param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.reset">
            <summary>
            This function resets the device.
            </summary>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.selfTest(System.Int16@,System.Text.StringBuilder)">
            <summary>
            This function runs the device self test routine and returns the test result.
            </summary>
            <param name="Self_Test_Result">
            This parameter contains the value returned from the device self test routine. A retured zero value indicates a successful run, a value other than zero indicates failure.
            </param>
            <param name="Description">
            This parameter returns the interpreted code as an user readable message string.
            
            Notes:
            (1) The array must contain at least 256 elements ViChar[256].
            
            </param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.revisionQuery(System.Text.StringBuilder,System.Text.StringBuilder)">
            <summary>
            This function returns the revision numbers of the instrument driver and the device firmware.
            </summary>
            <param name="Instrument_Driver_Revision">
            This parameter returns the Instrument Driver revision.
            
            Notes:
            (1) The array must contain at least 256 elements ViChar[256].
            (2) You may pass VI_NULL if you do not need this value.
            
            </param>
            <param name="Firmware_Revision">
            This parameter returns the device firmware revision. 
            
            Notes:
            (1) The array must contain at least 256 elements ViChar[256].
            (2) You may pass VI_NULL if you do not need this value.
            
            </param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.identificationQuery(System.Text.StringBuilder,System.Text.StringBuilder,System.Text.StringBuilder,System.Text.StringBuilder)">
            <summary>
            This function returns the device identification information.
            </summary>
            <param name="Manufacturer_Name">
            This parameter returns the manufacturer name.
            
            Notes:
            (1) The array must contain at least 256 elements ViChar[256].
            (2) You may pass VI_NULL if you do not need this value.
            
            </param>
            <param name="Device_Name">
            This parameter returns the device name.
            
            Notes:
            (1) The array must contain at least 256 elements ViChar[256].
            (2) You may pass VI_NULL if you do not need this value.
            
            </param>
            <param name="Serial_Number">
            This parameter returns the device serial number.
            
            Notes:
            (1) The array must contain at least 256 elements ViChar[256].
            (2) You may pass VI_NULL if you do not need this value.
            
            </param>
            <param name="Firmware_Revision">
            This parameter returns the device firmware revision.
            
            Notes:
            (1) The array must contain at least 256 elements ViChar[256].
            (2) You may pass VI_NULL if you do not need this value.
            
            </param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.getCalibrationMsg(System.Text.StringBuilder)">
            <summary>
            This function returns a human readable calibration message.
            
            </summary>
            <param name="Message">
            This parameter returns the calibration message.
            
            Notes:
            (1) The array must contain at least TLPM_BUFFER_SIZE (256) elements ViChar[256].
            </param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.getSensorInfo(System.Text.StringBuilder,System.Text.StringBuilder,System.Text.StringBuilder,System.Int16@,System.Int16@,System.Int16@)">
            <summary>
            This function is used to obtain informations from the connected sensor like sensor name, serial number, calibration message, sensor type, sensor subtype and sensor flags.  
            
            Remark:
            The meanings of the obtained sensor type, subtype and flags are:
            
            Sensor Types:
             SENSOR_TYPE_NONE               0x00 // No sensor
             SENSOR_TYPE_PD_SINGLE          0x01 // Photodiode sensor
             SENSOR_TYPE_THERMO             0x02 // Thermopile sensor
             SENSOR_TYPE_PYRO               0x03 // Pyroelectric sensor
            
            Sensor Subtypes:
             SENSOR_SUBTYPE_NONE            0x00 // No sensor
             
            Sensor Subtypes Photodiode:
             SENSOR_SUBTYPE_PD_ADAPTER      0x01 // Photodiode adapter
             SENSOR_SUBTYPE_PD_SINGLE_STD   0x02 // Photodiode sensor
             SENSOR_SUBTYPE_PD_SINGLE_FSR   0x03 // Photodiode sensor with 
                                                    integrated filter
                                                    identified by position 
             SENSOR_SUBTYPE_PD_SINGLE_STD_T 0x12 // Photodiode sensor with
                                                    temperature sensor
            Sensor Subtypes Thermopile:
             SENSOR_SUBTYPE_THERMO_ADAPTER  0x01 // Thermopile adapter
             SENSOR_SUBTYPE_THERMO_STD      0x02 // Thermopile sensor
             SENSOR_SUBTYPE_THERMO_STD_T    0x12 // Thermopile sensor with 
                                                    temperature sensor
            Sensor Subtypes Pyroelectric Sensor:
             SENSOR_SUBTYPE_PYRO_ADAPTER    0x01 // Pyroelectric adapter
             SENSOR_SUBTYPE_PYRO_STD        0x02 // Pyroelectric sensor
             SENSOR_SUBTYPE_PYRO_STD_T      0x12 // Pyroelectric sensor with
                                                    temperature sensor
            Sensor Flags:
             TLPM_SENS_FLAG_IS_POWER     0x0001 // Power sensor
             TLPM_SENS_FLAG_IS_ENERGY    0x0002 // Energy sensor
             TLPM_SENS_FLAG_IS_RESP_SET  0x0010 // Responsivity settable
             TLPM_SENS_FLAG_IS_WAVEL_SET 0x0020 // Wavelength settable
             TLPM_SENS_FLAG_IS_TAU_SET   0x0040 // Time constant settable
             TLPM_SENS_FLAG_HAS_TEMP     0x0100 // With Temperature sensor 
            </summary>
            <param name="Sensor_Name">
            This parameter returns the name of the connected sensor.
            
            </param>
            <param name="Sensor_Serial_Number">
            This parameter returns the serial number of the connected sensor.
            </param>
            <param name="Sensor_Calibration_Message">
            This parameter returns the calibration message of the connected sensor.
            
            </param>
            <param name="Sensor_Type">
            This parameter returns the sensor type of the connected sensor.
            
            Remark:
            The meanings of the obtained sensor type are:
            
            Sensor Types:
             SENSOR_TYPE_NONE               0x00 // No sensor
             SENSOR_TYPE_PD_SINGLE          0x01 // Photodiode sensor
             SENSOR_TYPE_THERMO             0x02 // Thermopile sensor
             SENSOR_TYPE_PYRO               0x03 // Pyroelectric sensor
            </param>
            <param name="Sensor_Subtype">
            This parameter returns the subtype of the connected sensor.
            
            Remark:
            The meanings of the obtained sensor subtype are:
            
            Sensor Subtypes:
             SENSOR_SUBTYPE_NONE            0x00 // No sensor
             
            Sensor Subtypes Photodiode:
             SENSOR_SUBTYPE_PD_ADAPTER      0x01 // Photodiode adapter
             SENSOR_SUBTYPE_PD_SINGLE_STD   0x02 // Photodiode sensor
             SENSOR_SUBTYPE_PD_SINGLE_FSR   0x03 // Photodiode sensor with 
                                                    integrated filter
                                                    identified by position 
             SENSOR_SUBTYPE_PD_SINGLE_STD_T 0x12 // Photodiode sensor with
                                                    temperature sensor
            Sensor Subtypes Thermopile:
             SENSOR_SUBTYPE_THERMO_ADAPTER  0x01 // Thermopile adapter
             SENSOR_SUBTYPE_THERMO_STD      0x02 // Thermopile sensor
             SENSOR_SUBTYPE_THERMO_STD_T    0x12 // Thermopile sensor with 
                                                    temperature sensor
            Sensor Subtypes Pyroelectric Sensor:
             SENSOR_SUBTYPE_PYRO_ADAPTER    0x01 // Pyroelectric adapter
             SENSOR_SUBTYPE_PYRO_STD        0x02 // Pyroelectric sensor
             SENSOR_SUBTYPE_PYRO_STD_T      0x12 // Pyroelectric sensor with
                                                    temperature sensor
            </param>
            <param name="Sensor_Flags">
            This parameter returns the flags of the connected sensor.
            
            Remark:
            The meanings of the obtained sensor flags are:
            
            Sensor Flags:
             TLPM_SENS_FLAG_IS_POWER     0x0001 // Power sensor
             TLPM_SENS_FLAG_IS_ENERGY    0x0002 // Energy sensor
             TLPM_SENS_FLAG_IS_RESP_SET  0x0010 // Responsivity settable
             TLPM_SENS_FLAG_IS_WAVEL_SET 0x0020 // Wavelength settable
             TLPM_SENS_FLAG_IS_TAU_SET   0x0040 // Time constant settable
             TLPM_SENS_FLAG_HAS_TEMP     0x0100 // With Temperature sensor
            </param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.errorQueryMode(System.Boolean)">
            <summary>
            This function selects the driver's error query mode.
            </summary>
            <param name="Mode">
            This parameter specifies the driver's error query mode. 
            
            If set to Automatic each driver function queries the instrument's error queue and in case an error occured returns the error number.
            
            If set to Manual the driver does not query the instrument for errors and therefore a driver function does not return instrument errors. You should use &lt;Error Query&gt; to manually query the instrument's error queue.
            
            VI_OFF (0): Manual error query.
            VI_ON  (1): Automatic error query (default).
            
            </param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.writeRaw(System.String)">
            <summary>
            This function writes directly to the instrument.
            </summary>
            <param name="Command">
            Null terminated command string to send to the instrument.
            
            </param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.readRaw(System.Text.StringBuilder,System.UInt32,System.UInt32@)">
            <summary>
            This function reads directly from the instrument.
            
            </summary>
            <param name="Buffer">
            Byte buffer that receives the data read from the instrument.
            
            Notes:
            (1) If received data is less than buffer size, the buffer is additionaly terminated with a '\0' character.
            (2) If received data is same as buffer size no '\0' character is appended. Its the caller's responsibility to make sure a buffer is '\0' terminated if the caller wants to interprete the buffer as string.
            </param>
            <param name="Size">
            This parameter specifies the buffer size.
            
            </param>
            <param name="Return_Count">
            Number of bytes actually transferred and filled into Buffer. This number doesn't count the additional termination '\0' character. If Return Count == size the buffer content will not be '\0' terminated.
            
            Notes:
            (1) You may pass VI_NULL if you don't need this value.
            
            </param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.setTimeoutValue(System.UInt32)">
            <summary>
            This function sets the interface communication timeout value.
            </summary>
            <param name="Value">
            This parameter specifies the communication timeout value in ms.
            
            </param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.getTimeoutValue(System.UInt32@)">
            <summary>
            This function gets the interface communication timeout value.
            
            </summary>
            <param name="Value">
            This parameter returns the communication timeout value in ms.
            
            </param>
            <returns>
            This is the error code returned by the function call. For error codes and descriptions see &lt;Error Message&gt;.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.IsUsingTLPMDriver">
            <summary>
            Returns true if the TLPM driver is sued, false if is the PM100D driver used
            </summary>
            <returns>Returns true if the TLPM driver is sued, false if is the PM100D driver used</returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.GetPM100DriverSupport">
            <summary>
             Returns true if the PM100D Driver is supported.
            </summary>
            <returns>
            Returns true if the PM100D Driver is supported.
            </returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.PInvokeTLPM.TestForError(System.Runtime.InteropServices.HandleRef,System.Int32)">
            <summary>
            
            </summary>
            <param name="handle"></param>
            <param name="status"></param>
            <returns></returns>
        </member>
        <member name="M:Thorlabs.TLPM_64.Interop.TLPM.PInvokeTLPM.ThrowError(System.Runtime.InteropServices.HandleRef,System.Int32)">
            <summary>
            
            </summary>
            <param name="handle"></param>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="T:Thorlabs.TLPM_64.Interop.TLPMConstants">
            <summary>
            
            </summary>
        </member>
    </members>
</doc>
